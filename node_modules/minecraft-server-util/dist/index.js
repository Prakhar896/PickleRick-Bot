"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const status_1 = require("./status");
const statusFE01FA_1 = require("./statusFE01FA");
const statusFE01_1 = require("./statusFE01");
const statusFE_1 = require("./statusFE");
const statusBedrock_1 = require("./statusBedrock");
const query_1 = require("./query");
const queryFull_1 = require("./queryFull");
const Description_1 = __importDefault(require("./structure/Description"));
const Packet_1 = __importDefault(require("./structure/Packet"));
const RCON_1 = require("./structure/RCON");
const TCPSocket_1 = __importDefault(require("./structure/TCPSocket"));
const UDPSocket_1 = __importDefault(require("./structure/UDPSocket"));
/**
 * Retrieves the status of the server by using the 1.7+ format.
 * @param {string} host The host of the server
 * @param {StatusOptions} [options] The options to use when retrieving the status
 * @returns {Promise<StatusResponse>} The status information of the server
 * @async
 * @deprecated Use `{@see #status}` instead
 */
function ping(host, options) {
    process.emitWarning('The `ping()` method has been deprecated in favor of a more appropriate name `status()`. `ping()` will be removed in the next major release.', 'DeprecationWarning');
    return status_1.status(host, options);
}
/**
 * Retrieves the status of the server by using the 1.6.1 - 1.6.4 format.
 * @param {string} host The host of the server
 * @param {StatusOptions} [options] The options to use when retrieving the status
 * @returns {Promise<StatusResponse>} The status information of the server
 * @async
 * @deprecated Use `statusFE01FA()` instead
 */
function pingFE01FA(host, options) {
    process.emitWarning('The `pingFE01FA()` method has been deprecated in favor of a more appropriate name `statusFE01FA()`. `pingFE01FA()` will be removed in the next major release.', 'DeprecationWarning');
    return statusFE01FA_1.statusFE01FA(host, options);
}
/**
 * Retrieves the status of the server by using the 1.4.2 - 1.5.2 format.
 * @param {string} host The host of the server
 * @param {StatusOptions} [options] The options to use when retrieving the status
 * @returns {Promise<StatusResponse>} The status information of the server
 * @async
 * @deprecated Use `statusFE01()` instead
 */
function pingFE01(host, options) {
    process.emitWarning('The `pingFE01()` method has been deprecated in favor of a more appropriate name `statusFE01()`. `pingFE01()` will be removed in the next major release.', 'DeprecationWarning');
    return statusFE01_1.statusFE01(host, options);
}
/**
 * Retrieves the status of the server by using the Beta 1.8 - 1.3.2 format.
 * @param {string} host The host of the server
 * @param {StatusOptions} [options] The options to use when retrieving the status
 * @returns {Promise<StatusResponse>} The status information of the server
 * @async
 * @deprecated Use `statusFE()` instead
 */
function pingFE(host, options) {
    process.emitWarning('The `pingFE()` method has been deprecated in favor of a more appropriate name `statusFE()`. `pingFE()` will be removed in the next major release.', 'DeprecationWarning');
    return statusFE_1.statusFE(host, options);
}
module.exports = { ping, pingFE01FA, pingFE01, pingFE, status: status_1.status, statusFE01FA: statusFE01FA_1.statusFE01FA, statusFE01: statusFE01_1.statusFE01, statusFE: statusFE_1.statusFE, statusBedrock: statusBedrock_1.statusBedrock, query: query_1.query, queryFull: queryFull_1.queryFull, Description: Description_1.default, Packet: Packet_1.default, RCON: RCON_1.RCON, TCPSocket: TCPSocket_1.default, UDPSocket: UDPSocket_1.default };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLHFDQUFrQztBQUNsQyxpREFBOEM7QUFDOUMsNkNBQTBDO0FBQzFDLHlDQUFzQztBQUN0QyxtREFBZ0Q7QUFDaEQsbUNBQWdDO0FBQ2hDLDJDQUF3QztBQUN4QywwRUFBa0Q7QUFDbEQsZ0VBQXdDO0FBQ3hDLDJDQUF3QztBQUN4QyxzRUFBOEM7QUFDOUMsc0VBQThDO0FBSTlDOzs7Ozs7O0dBT0c7QUFDSCxTQUFTLElBQUksQ0FBQyxJQUFZLEVBQUUsT0FBdUI7SUFDbEQsT0FBTyxDQUFDLFdBQVcsQ0FBQyw2SUFBNkksRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO0lBRXpMLE9BQU8sZUFBTSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztBQUM5QixDQUFDO0FBRUQ7Ozs7Ozs7R0FPRztBQUNILFNBQVMsVUFBVSxDQUFDLElBQVksRUFBRSxPQUF1QjtJQUN4RCxPQUFPLENBQUMsV0FBVyxDQUFDLCtKQUErSixFQUFFLG9CQUFvQixDQUFDLENBQUM7SUFFM00sT0FBTywyQkFBWSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztBQUNwQyxDQUFDO0FBRUQ7Ozs7Ozs7R0FPRztBQUNILFNBQVMsUUFBUSxDQUFDLElBQVksRUFBRSxPQUF1QjtJQUN0RCxPQUFPLENBQUMsV0FBVyxDQUFDLHlKQUF5SixFQUFFLG9CQUFvQixDQUFDLENBQUM7SUFFck0sT0FBTyx1QkFBVSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztBQUNsQyxDQUFDO0FBRUQ7Ozs7Ozs7R0FPRztBQUNILFNBQVMsTUFBTSxDQUFDLElBQVksRUFBRSxPQUF1QjtJQUNwRCxPQUFPLENBQUMsV0FBVyxDQUFDLG1KQUFtSixFQUFFLG9CQUFvQixDQUFDLENBQUM7SUFFL0wsT0FBTyxtQkFBUSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztBQUNoQyxDQUFDO0FBRUQsaUJBQVMsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFOLGVBQU0sRUFBRSxZQUFZLEVBQVosMkJBQVksRUFBRSxVQUFVLEVBQVYsdUJBQVUsRUFBRSxRQUFRLEVBQVIsbUJBQVEsRUFBRSxhQUFhLEVBQWIsNkJBQWEsRUFBRSxLQUFLLEVBQUwsYUFBSyxFQUFFLFNBQVMsRUFBVCxxQkFBUyxFQUFFLFdBQVcsRUFBWCxxQkFBVyxFQUFFLE1BQU0sRUFBTixnQkFBTSxFQUFFLElBQUksRUFBSixXQUFJLEVBQUUsU0FBUyxFQUFULG1CQUFTLEVBQUUsU0FBUyxFQUFULG1CQUFTLEVBQUUsQ0FBQyJ9