"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const parseDescription_1 = __importDefault(require("./parseDescription"));
/**
 * Formats the raw response from a status request into a more useable format
 * @param {string} host The host of the server
 * @param {number} port The port of the server
 * @param {SRVRecord | null} srvRecord The SRV lookup data
 * @param {number} protocolVersion The protocol version returned from the server
 * @param {string} version The version string of the server
 * @param {string} motd The MOTD of the server
 * @param {number} onlinePlayers The amount of players in the server
 * @param {number} maxPlayers The maximum amount of players in the server
 * @returns {StatusResponse} The formatted result
 */
function formatResult(host, port, srvRecord, protocolVersion, version, motd, onlinePlayers, maxPlayers) {
    assert_1.default(host.length > 0, 'Expected host.length > 0, got ' + host.length);
    assert_1.default(Number.isInteger(port), 'Expected integer, got ' + port);
    assert_1.default(port > 0, 'Expected port > 0, got ' + port);
    assert_1.default(port < 65536, 'Expected port < 65536, got ' + port);
    assert_1.default(Number.isInteger(protocolVersion), 'Expected integer, got ' + protocolVersion);
    assert_1.default(protocolVersion >= 0, 'Expected protocolVersion >= 0, got ' + protocolVersion);
    assert_1.default(version.length > 0, 'Expected version.length > 0, got ' + version.length);
    assert_1.default(Number.isInteger(onlinePlayers), 'Expected integer, got ' + onlinePlayers);
    assert_1.default(Number.isInteger(maxPlayers), 'Expected integer, got ' + maxPlayers);
    const description = parseDescription_1.default(motd);
    return {
        host,
        port,
        srvRecord,
        version,
        protocolVersion,
        onlinePlayers,
        maxPlayers,
        samplePlayers: null,
        description,
        favicon: null,
        modInfo: null
    };
}
exports.default = formatResult;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWF0UmVzdWx0RkUwMUZBLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWwvZm9ybWF0UmVzdWx0RkUwMUZBLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsb0RBQTRCO0FBQzVCLDBFQUFrRDtBQUlsRDs7Ozs7Ozs7Ozs7R0FXRztBQUNILFNBQVMsWUFBWSxDQUFDLElBQVksRUFBRSxJQUFZLEVBQUUsU0FBMkIsRUFBRSxlQUF1QixFQUFFLE9BQWUsRUFBRSxJQUFZLEVBQUUsYUFBcUIsRUFBRSxVQUFrQjtJQUMvSyxnQkFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLGdDQUFnQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN4RSxnQkFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsd0JBQXdCLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDaEUsZ0JBQU0sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxFQUFFLHlCQUF5QixHQUFHLElBQUksQ0FBQyxDQUFDO0lBQ25ELGdCQUFNLENBQUMsSUFBSSxHQUFHLEtBQUssRUFBRSw2QkFBNkIsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUMzRCxnQkFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLEVBQUUsd0JBQXdCLEdBQUcsZUFBZSxDQUFDLENBQUM7SUFDdEYsZ0JBQU0sQ0FBQyxlQUFlLElBQUksQ0FBQyxFQUFFLHFDQUFxQyxHQUFHLGVBQWUsQ0FBQyxDQUFDO0lBQ3RGLGdCQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsbUNBQW1DLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2pGLGdCQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsRUFBRSx3QkFBd0IsR0FBRyxhQUFhLENBQUMsQ0FBQztJQUNsRixnQkFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLEVBQUUsd0JBQXdCLEdBQUcsVUFBVSxDQUFDLENBQUM7SUFFNUUsTUFBTSxXQUFXLEdBQUcsMEJBQWdCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFM0MsT0FBTztRQUNOLElBQUk7UUFDSixJQUFJO1FBQ0osU0FBUztRQUNULE9BQU87UUFDUCxlQUFlO1FBQ2YsYUFBYTtRQUNiLFVBQVU7UUFDVixhQUFhLEVBQUUsSUFBSTtRQUNuQixXQUFXO1FBQ1gsT0FBTyxFQUFFLElBQUk7UUFDYixPQUFPLEVBQUUsSUFBSTtLQUNiLENBQUM7QUFDSCxDQUFDO0FBRUQsa0JBQWUsWUFBWSxDQUFDIn0=