"use strict";function _interopDefault(t){return t&&"object"==typeof t&&"default"in t?t.default:t}function trimWrappers(t){return t.replace(/\[\[/g,"").replace(/\]\]/g,"").replace(/\{\{/g,"").replace(/\}\}/g,"").trim()}function trimOr(t){var e=t.indexOf("|");return-1!==e?t.substring(0,e):t}function getValue(t,e){if(!t)return null;var r=t.trim().replace(/File:/,"").replace(/\{\{\d+\}\}/g,"").replace(extraPropertyPattern,"").replace(endingPattern,"");if("y"===r||"yes"===r)return!0;if("birthPlace"==e)return t.trim();var a=r.match(linksPattern);return a?a[0].split(linkSeparatorPattern).filter(function(t){return t}):trimOr(trimWrappers(r))}function dataType(t){var e=t.globalPattern,r=t.parsePattern,a=t.parse,n=t.variable,l=t.name;return function(t){var i=t.match(e);if(!i){var s;return s={},defineProperty(s,l,[]),defineProperty(s,"sourceAfter",t),s}var o=i.map(function(t){return a(t.match(r))}),u=i.reduce(function(t,e,r){return o[r]===DO_NOT_REPLACE?t:t.replace(e,"$"+n+"_"+r)},t);return{data:defineProperty({},l,o),sourceAfter:u}}}function byDataHandler(t,e){var r=t.source,a=t.context,n=e(r),l=n.data,i=n.sourceAfter;return{context:Object.assign({},a,l),source:i}}function extractData(t){return dataTypes$1.map(function(t){return t.handler}).reduce(byDataHandler,{context:{},source:t})}function findPropertyList(t){var e=t.match(keyValueGlobalPattern);return e?e.map(function(t){var e=keyValuePattern.exec(t);if(!e)return null;var r=slicedToArray(e,3),a=r[1],n=r[2],l=camelCase(a.trim());return{key:l,value:getValue(n,l)}}).filter(function(t){return t}):[]}function fillVariable(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=r.simplifyDataValues;if("string"!=typeof t)return console.log("Warning: Something went wrong. Could not fill variables in: ("+(void 0===t?"undefined":_typeof(t))+") "+JSON.stringify(t)),{};var n=dataTypes$1.find(function(e){return t.match(e.pattern)});if(n){var l=n.pattern.exec(t),i=slicedToArray(l,2),s=i[0],o=i[1],u=e[n.name][parseInt(o,10)];return a||"string"!=typeof u?u:t.replace(s,u)}return t}function fillVariables(t,e,r){if(void 0===t)return t;if(t instanceof Date)return t;if("number"==typeof t)return t;if(Array.isArray(t))return t.map(function(t){return fillVariables(t,e,r)});if("object"===(void 0===t?"undefined":_typeof(t)))return Object.keys(t).reduce(function(a,n){return Object.assign(a,defineProperty({},n,fillVariables(t[n],e,r)))},{});var a=fillVariable(t,e,r);return a===t?t:fillVariables(a,e,r)}function handleSmallData(t,e,r){var a=r.simplifyDataValues;if("string"==typeof t&&t.match(smallDataType.pattern)){var n=t.replace(smallDataType.pattern,"").replace(/,/,"").trim(),l=smallDataType.pattern.exec(t),i=slicedToArray(l,2),s=i[1],o=e[smallDataType.name][parseInt(s,10)],u={primary:getVariableValue(n,e,{simplifyDataValues:a}),secondary:getVariableValue(o,e,{simplifyDataValues:a})};return a?u.primary:u}return null}function getVariableValue(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=r.simplifyDataValues,n=handleSmallData(t,e,{simplifyDataValues:a});return n||fillVariables(t,e,{simplifyDataValues:a})}function reduceVariable(t,e,r,a){if(null===e)return null;if("boolean"==typeof e)return e;if(Array.isArray(e))return e.map(function(t){return getVariableValue(t,r,a)});if(t.match(/areaTotal/)||t.match(/population/)){var n=numberParse(e);if(!1===n&&(n=parseFloat(e,10)),!isNaN(n))return n}if(t.match(/date/i)){var l=+new Date(e);if(!isNaN(l))return new Date(e)}var i=getVariableValue(e,r,a);return Array.isArray(i)?i.map(function(t){return getVariableValue(t,r,a)}):i}function byVariableReduction(t,e){return function(r,a){var n=a.key,l=a.value,i=reduceVariable(n,l,t,e);return""===i||null===i?r:Object.assign({},r,defineProperty({},n,i))}}function extractProperties(t){var e=t.source,r=t.context,a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=a.simplifyDataValues,l=void 0===n||n;return findPropertyList(e).reduce(byVariableReduction(r,{simplifyDataValues:l}),{})}function transformProperties(t){return Object.keys(t).reduce(function(e,r){var a=t[r],n=r.match(blankNamePattern);if(n){var l=n[1]||"",i=t["blank"+l+"NameSec2"],s=t["blank"+l+"InfoSec2"];return"string"!=typeof i?e:Object.assign(e,defineProperty({},camelCase(i),s))}return r.match(blankInfoPattern)?e:Object.assign(e,defineProperty({},r,a))},{})}function findOuterIndex(t){for(var e=[],r=0;r<t.length-1;r++){var a=t.substr(r,2);if("{{"!==a){if("}}"===a){e.pop();if(0===e.length)return r+2;r++}}else e.push(r),r++}}function parse(t){var e=t.match(infoBoxStartPattern);if(!e)return{data:t,sourceLeft:null};var r=e.index,a=t.substring(r),n=findOuterIndex(a);if(!n)return{data:t,sourceLeft:null};var l=a.substring(0,n),i=t.substring(n);return{data:l,sourceLeft:!i.match(infoBoxStartPattern)?null:i}}function extractInfoboxes(t){for(var e=parse(t),r=[e.data];e.sourceLeft;)e=parse(e.sourceLeft),r.push(e.data);return r}function cleanSource(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=e.removeSmall,a=void 0!==r&&r,n=e.removeReferences;return(void 0===n||n)&&(t=t.replace(/<ref(\s\w+=[^>]+)?>.*<\/ref>/g,"").replace(/<ref(\s\w+=[^>]+)?\s?\/>/g,"")),a&&(t=t.replace(/<small>.*<\/small>/g,"")),t.replace(/'''?/g,"").replace(/\|display=inline/g,"").replace(/<br\s?\/?>/g,",").replace(/&minus;/g,"-").replace(/<sup>/g,"^").replace(/\{\{sfn\|([^\}\}]+)\}\}/g,"").replace(/\{\{efn\|([^\}\}]+)\}\}/g,"").replace(/âˆ’/g,"-").replace(/<\/sup>/g,"").replace(/\{\{\s*nowrap\s*\|([^\n\}]+)\}\}/gi,"$1").replace(/<!--([\s\S]*?)-->/g,"").replace(/&nbsp;/g," ").replace("|''See list''","")}function transformRowSpan(t){return t.map(transformCells).reduce(function(t,e,r){for(var a=0===r?0:1,n=0;n<e.length;n++)t[n+a]||(t[n+a]={}),e[n]&&(t[n+a][e[n]]=1);return t},[]).map(function(t){return Object.keys(t).join(",")}).join(" || ")}function clean(t){return t.substring(2,t.length-2).replace(linkPattern$1,function(t,e){return e.split("|")[0]}).replace(/'''?/g,"")}function parseRow(t){var e=t[0].match(/BS(\d)/),r=t[0].substring(2),a=1,n=[],l=1;for(e&&(a=e[1],r=t[0].substring(3));l<=a;l++)n.push(t[l]);return{type:r,margin:t[l++],text1:t[l++],text2:t[l++],comment:t[l++],icons:n}}function getMatches(t,e){for(var r=void 0,a=[];null!==(r=e.exec(t));)a.push({value:r[1]&&r[1].trim(),start:r.index,end:r.index+r[0].length});return a}function parseTableData(t){var e=t.match(rowPattern$1);return e?e.map(function(t){var e=t.match(rowPatternSingle);return slicedToArray(e,2)[1].trim().split("|").slice(1)}):[]}function getTables(t){var e=getMatches(t,tableStartPattern$1),r=getMatches(t,tableEndPattern$1);return e.map(function(e,a){var n=r[a];if(!n)throw new Error("[Table Parsing] Failed to pair table");return{rows:parseTableData(t.substring(e.end,n.start).trim().replace(/'''/g,"")),start:e.start,end:n.end}})}function last(t){return t.length?t[t.length-1]:void 0}function parseInfobox(t,e){var r=extractInfoboxes(t).map(function(t){return transformProperties(extractProperties(extractData(cleanSource(t,e)),e))});if(!r.length)return{};var a={general:r.shift()};return r.forEach(function(t){var e=t.type;e?a[camelCase(e)]=t:Object.assign(a,{general:Object.assign({},a.general,t)})}),a.tables=parseTables(t),a.bsTables=parseBsTables(t),a.lists=parseLists(t),a}var camelCase=_interopDefault(require("camelcase")),_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},defineProperty=function(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t},slicedToArray=function(){function t(t,e){var r=[],a=!0,n=!1,l=void 0;try{for(var i,s=t[Symbol.iterator]();!(a=(i=s.next()).done)&&(r.push(i.value),!e||r.length!==e);a=!0);}catch(t){n=!0,l=t}finally{try{!a&&s.return&&s.return()}finally{if(n)throw l}}return r}return function(e,r){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,r);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),toConsumableArray=function(t){if(Array.isArray(t)){for(var e=0,r=Array(t.length);e<t.length;e++)r[e]=t[e];return r}return Array.from(t)},smallGlobalPattern=/\{\{small\|([^\}\}]+)\}\}/g,smallPattern=/small\|([^\}\}]+)\}\}/,small={globalPattern:smallGlobalPattern,parsePattern:smallPattern,parse:function(t){return slicedToArray(t,2)[1]},variable:"SMALL",name:"smalls"},flagGlobalPattern=/\{\{flag\|([^\}\}]+)\}\}/g,flagPattern=/flag\|([^\}\}]+)\}\}/,flag={globalPattern:flagGlobalPattern,parsePattern:flagPattern,parse:function(t){return slicedToArray(t,2)[1]},variable:"FLAG",name:"flags"},coordsGlobalPattern=/\{\{coord\|([^\}\}]+)\}\}/g,coordsPattern=/coord\|([^\}\}]+)\}\}/,coords={globalPattern:coordsGlobalPattern,parsePattern:coordsPattern,parse:function(t){return slicedToArray(t,2)[1]},variable:"COORD",name:"coords"},globalPattern=/\[\[([^\]\|]+)\|?([^\]]+)?\]\]/g,pattern=/\[\[([^\]\|]+)\|?([^\]]+)?\]\]/,instances={globalPattern:globalPattern,parsePattern:pattern,parse:function(t){var e=slicedToArray(t,3),r=e[1],a=e[2];return r||a},variable:"INSTANCE",name:"instances"},extraPropertyPattern=/\n?\s?\|\s?\w+$/,endingPattern=/\n\}\}$/,linksPattern=/((\$\w+_\d+)\s*,?\s*){2,}/g,linkSeparatorPattern=/[,\s?]/g,listItemPrefixPattern=/^\|\s?/,unbulletedListGlobalPattern=/\{\{(?:unbulleted list|ubl|ubt|ublist|unbullet)\s?\|([^\}\}]+)\}\}/gi,unbulletedListItemPattern=/\|\s*([^|}]+)/g,unbulletedLists={globalPattern:unbulletedListGlobalPattern,parsePattern:unbulletedListItemPattern,parse:function(t){return t?t.map(function(t){return t.replace(listItemPrefixPattern,"").trim()}).filter(function(t){return t&&t.length}):[]},variable:"UNBULLETED_LIST",name:"unbulletedLists"},listItemPrefixPattern$1=/^\*\s*/,plainListGlobalPattern=/\n(\*\s*[^*|]+)+/g,plainListItemPattern=/\*\s*([^*|]+)/g,unmarkedLists={globalPattern:plainListGlobalPattern,parsePattern:plainListItemPattern,parse:function(t){return t?t.map(function(t){return t.replace(listItemPrefixPattern$1,"").trim()}).filter(function(t){return t&&t.length}):[]},variable:"UNMARKED_LIST",name:"unmarkedLists"},listItemPrefixPattern$2=/^\*\s?/,plainListGlobalPattern$1=/\{\{f?p?P?l?a?i?n?t?\s?list\s?\|([^\}\}]+)\}\}/g,plainListItemPattern$1=/\*\s*([^*}]+)/g,plainLists={globalPattern:plainListGlobalPattern$1,parsePattern:plainListItemPattern$1,parse:function(t){return t?t.map(function(t){return t.replace(listItemPrefixPattern$2,"").trim()}).filter(function(t){return t&&t.length}):[]},variable:"PLAIN_LIST",name:"plainLists"},marriageGlobalPattern=/\{\{Marriage\|([^\}\}]+)\}\}/gi,marriagePattern=/Marriage\|([^|]+)\|(.*)\}\}/i,marriages={globalPattern:marriageGlobalPattern,parsePattern:marriagePattern,parse:function(t){var e=slicedToArray(t,3);return{who:e[1],married:e[2]}},variable:"MARRIAGE",name:"marriages"},nbayGlobalPattern=/\{\{nbay\|([^\}\}]+)\}\}/gi,nbayPattern=/nbay\|([^|]+)\|(.*)\}\}/i,nbay={globalPattern:nbayGlobalPattern,parsePattern:nbayPattern,parse:function(t){var e=slicedToArray(t,3),r=e[1];e[2];return r},variable:"nbay",name:"nbay"},otherGlobalPattern=/\{\{([^|\n]+)\|([^|\n]+)\|?([^\}\n]+)?\}\}/g,otherPattern=/\{\{([^|\n]+)\|([^|\n]+)\|?([^\}\n]+)?\}\}/,other={globalPattern:otherGlobalPattern,parsePattern:otherPattern,parse:function(t){var e=slicedToArray(t,4),r=e[1];e[2],e[3];return r},variable:"OTHER",name:"others"},hlistGlobalPattern=/\{\{hlist\|([^\}\}]+)\}\}/gi,hlistPattern=/hlist\|(.*)\}\}/i,hlist={globalPattern:hlistGlobalPattern,parsePattern:hlistPattern,parse:function(t){return slicedToArray(t,2)[1].split("|")},variable:"HLIST",name:"hlists"},birthDateGlobalPattern=/\{\{birth\sdate([^\}\}]+)\}\}/gi,birthDatePattern=/(\d+)\|(\d+)\|(\d+)/,millisInYear=31536e6,birthDates={globalPattern:birthDateGlobalPattern,parsePattern:birthDatePattern,parse:function(t){var e=slicedToArray(t,4),r=e[1],a=e[2],n=e[3],l=new Date(r,a-1,n);return{date:l,age:Math.floor((Date.now()-+l)/millisInYear)}},variable:"BIRTH_DATE",name:"birthDates"},DO_NOT_REPLACE=Symbol("DO NOT REPLACE"),labeledDateGlobalPattern=/\{\{([^\n\}\}]+)\}\}/g,labeledDatePattern=/(.*)/,labeledDates={globalPattern:labeledDateGlobalPattern,parsePattern:labeledDatePattern,parse:function(t){var e=t[0].indexOf("|");if(e>-1){var r=t[0].substring(e+1).slice(0,-2),a=new Date(r+" GMT");if(!isNaN(a.getTime()))return{date:a};if(a=new Date(r.split("|").join("-")+" GMT"),!isNaN(a.getTime()))return{date:a}}return DO_NOT_REPLACE},variable:"LABELED_DATE",name:"labeledDates"},deathDateGlobalPattern=/\{\{death\sdate\sand\sage([^\}\}]+)\}\}/gi,deathDatePattern=/(\d+)\|(\d+)\|(\d+)\|(\d+)\|?(\d+)?\|?(\d+)?/,millisInYear$1=31536e6,deathDates={globalPattern:deathDateGlobalPattern,parsePattern:deathDatePattern,parse:function(t){var e=slicedToArray(t,7),r=e[1],a=e[2],n=e[3],l=e[4],i=e[5],s=void 0===i?0:i,o=e[6],u=void 0===o?0:o,c=new Date(r,a-1,n),f=new Date(l,s-1,u);return{date:c,age:Math.floor((Number(c)-Number(f))/millisInYear$1)}},variable:"DEATH_DATE",name:"deathDates"},URLGlobalPattern=/\{\{URL\|([^\}\}]+)\}\}/g,URLPattern=/URL\|([^\}\}]+)\}\}/,url={globalPattern:URLGlobalPattern,parsePattern:URLPattern,parse:function(t){return slicedToArray(t,2)[1]},variable:"URL",name:"urls"},websiteGlobalPattern=/\[(https?):\/\/((?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6})\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)\s+([\w\s]+)\]/g,websitePattern=/\[(https?):\/\/((?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6})\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)\s+([\w\s]+)\]/,website={globalPattern:websiteGlobalPattern,parsePattern:websitePattern,parse:function(t){var e=slicedToArray(t,5),r=e[1],a=e[2],n=e[3];return{protocol:r,hostname:a,path:n,title:e[4],url:r+"://"+a+n}},variable:"WEBSITE",name:"websites"},convertGlobalPattern=/\{\{convert\|([\d\.]+)\|(\w+)/g,convertPattern=/\{\{convert\|([\d\.]+)\|(\w+)/,convert={globalPattern:convertGlobalPattern,parsePattern:convertPattern,parse:function(t){var e=slicedToArray(t,3);return e[1]+" "+e[2]},variable:"CONVERT",name:"converts"},filmDatesPattern=/\{\{film\sdate([^\}\}]+)\}\}/gi,filmDatePatternGlobal=/(\d+)\|?(\d+)\|?(\d+)\|?([^\|\}]*)\|?(ref\d+=([^\|\}]*))?/g,filmDatePattern=/(\d+)\|?(\d+)\|?(\d+)\|?([^\|\}]*)\|?(ref\d+=([^\|\}]*))?/,filmDates={globalPattern:filmDatesPattern,parsePattern:filmDatePatternGlobal,parse:function(t){return t.map(function(t){var e=t.match(filmDatePattern),r=slicedToArray(e,7),a=(r[0],r[1]),n=r[2],l=r[3],i=r[4],s=(r[5],r[6]);return{date:new Date(a,n&&n-1,l),location:i,ref:s}})},variable:"FILM_DATES",name:"filmDates"},otherGlobalPattern$1=/<ref(\s\w+=[^>]+)?>(.*)<\/ref>/g,otherPattern$1=/<ref(\s\w+=[^>]+)?>(.*)<\/ref>/,attributeGlobalPattern=/(\w+)=(["\w]+)/g,attributePattern=/(\w+)=(["\w]+)/,ref1={globalPattern:otherGlobalPattern$1,parsePattern:otherPattern$1,parse:function(t){var e=slicedToArray(t,3),r=(e[0],e[1]),a=e[2];return{attributes:((r||"").match(attributeGlobalPattern)||[]).reduce(function(t,e){if(e){var r=e.match(attributePattern),a=slicedToArray(r,3),n=(a[0],a[1]),l=a[2];t[n]=l.replace(/"/g,"")}return t},{}),contents:a}},variable:"REF",name:"refs"},otherGlobalPattern$2=/<ref(\s\w+=[^>]+)?\/>/g,otherPattern$2=/<ref(\s\w+=[^>]+)?\/>/,attributeGlobalPattern$1=/(\w+)=(["\w]+)/g,attributePattern$1=/(\w+)=(["\w]+)/,ref2={globalPattern:otherGlobalPattern$2,parsePattern:otherPattern$2,parse:function(t){return{attributes:t[1].match(attributeGlobalPattern$1).reduce(function(t,e){var r=e.match(attributePattern$1),a=slicedToArray(r,3),n=(a[0],a[1]),l=a[2];return t[n]=l.replace(/"/g,""),t},{})}},variable:"REF",name:"refs"},globalPattern$1=/\{\{formatnum:\d+\}\}/gi,parsePattern=/\{\{formatnum:(\d+)\}\}/,formatNum={globalPattern:globalPattern$1,parsePattern:parsePattern,parse:function(t){var e=slicedToArray(t,2),r=e[1];return parseFloat(r)},variable:"FORMAT_NUM",name:"formatNum"},dataTypes=[instances,ref1,ref2,small,formatNum,flag,coords,marriages,birthDates,labeledDates,deathDates,unbulletedLists,website,hlist,url,convert,nbay,filmDates,other,plainLists,unmarkedLists],dataTypes$1=dataTypes.map(function(t){return{handler:dataType(t),name:t.name,pattern:new RegExp("\\$"+t.variable+"_(\\d+)")}}),keyValueGlobalPattern=/\|\s*([-'\u0400-\u04FF\w\s]+)\s*=\s*([^|]+)?/g,keyValuePattern=/\|\s*([-'\u0400-\u04FF\w\s]+)\s*=\s*([^|]+)?/,numberParse=function(t){return"string"==typeof t&&(t=t.trim().replace(/ /g,""),t.match(/,/)&&t.match(/\./)?t.indexOf(",")<t.indexOf(".")?parseEnglish(t):parseSpanish(t):t.match(/,/)&&!t.match(/\./)?t.match(/,/g).length>1?parseEnglish(t):t.match(/,[0-9]{3}($|^[0-9])/)?parseEnglish(t):parseSpanish(t):!t.match(/,/)&&t.match(/\./)?t.match(/\./g).length>1?parseSpanish(t):t.match(/\.[0-9]{3}($|^[0-9])/)?parseSpanish(t):parseEnglish(t):(+t).toString()===t&&+t)},parseEnglish=function(t){return+t.replace(/,/g,"")},parseSpanish=function(t){return+t.replace(/\./g,"").replace(/,/g,".")},smallDataType=dataTypes$1.find(function(t){return"smalls"===t.name}),blankNamePattern=/blank(\d+)?NameSec2/,blankInfoPattern=/blank(\d+)?InfoSec2/,infoBoxStartPattern=/{{\w*box/,tableStartPattern=/{\|(.*)\n?/,tableEndPattern=/\n\|}/,headersPattern=/!\s?(.*)/g,rowPattern=/\|-/,cellSeparatorPattern=/(?:\n\|)|(?:\|\|)/,linkPattern=/\[\[([^\]]+)\]\]/g,linkNamePattern=/^.*\|/,inlineHeaderPattern="!!",actionPattern=/{{anchor\|(.*)}}/g,rowSpanCountPattern=/rowspan="(\d+)"/,stripLinks=function(t){return t.replace(linkPattern,function(t,e){return e.replace(linkNamePattern,"").trim()||e})},removeActions=function(t){return t.replace(actionPattern,"")},transformCell=function(t){return stripLinks(removeActions(t||"")).replace(rowSpanCountPattern,"").replace(linkNamePattern,"").trim()},transformCells=function(t){return t.split(cellSeparatorPattern).map(transformCell)},findIndex=function(t,e){var r=t.match(e);return r?r.index:-1},findTableStart=function(t){var e=t.match(tableStartPattern);return e?e.index+e[0].length:-1},findTableEnd=function(t){return findIndex(t,tableEndPattern)},getHeaders=function(t){for(var e=[],r=void 0;r=headersPattern.exec(t);)e.push.apply(e,toConsumableArray(r[1].split(inlineHeaderPattern).map(transformCell)));return e},getRows=function(t){var e=t.split(rowPattern).map(function(t){return t.replace(/^.*\n+?\|/,"").trim()}).filter(function(t){return t}),r=[],a=0,n=0,l=[],i=!0,s=!1,o=void 0;try{for(var u,c=e[Symbol.iterator]();!(i=(u=c.next()).done);i=!0){var f=u.value,p=f.match(rowSpanCountPattern);p&&(a=0,n=parseInt(p[1]),l=[]),a<n?(l.push(f),++a===n&&r.push(transformRowSpan(l))):r.push(f)}}catch(t){s=!0,o=t}finally{try{!i&&c.return&&c.return()}finally{if(s)throw o}}return r},getNextTable=function(t,e,r){var a=t,n=findTableStart(a);if(-1===n)return null;a=a.substring(n);var l=findTableEnd(a);if(-1===l)return null;a=a.substring(0,l);var i=getRows(a);if(!i.length)return null;var s=getHeaders(i[0]);return s.length?{data:i.slice(1).map(transformCells).map(function(t){return s.reduce(function(a,n,l){return a[camelCase(fillVariable(n,e,r))]=fillVariables(t[l],e,r),a},{})}),end:n+l}:null},parseTables=function(t,e){for(var r=cleanSource(t,e),a=extractData(r),n=[],l=a.source,i=null;i=getNextTable(l,a.context,e);){if(!i)return n;n.push(i.data),l=l.substring(i.end)}return n},linkPattern$1=/\[\[([^\]]+)\]\]/g,kmPattern=/{{BSkm\|([\dx]+,[\dx]+)\|([\dx]+,[\dx]+)}}/g,parseBsTables=function(t){var e=t.replace(kmPattern,"$1/$2").match(/{{BS([^}}]+)}}/g);return e?e.map(function(t){return clean(t).split("|")}).map(parseRow).filter(function(t){return"-"!==t.type[0]}):null},headingPattern=/[^=]==\s?([\w\s]+)\s?==/g,subheadingPattern=/===([\w\s]+)===/g,tableStartPattern$1=/{{list.+start.*}}/gi,tableEndPattern$1=/{{list.+end.*}}/gi,rowPattern$1=/{{(.*)}}/g,rowPatternSingle=/{{(.*)}}/,parseLists=function(t){var e=getMatches(t,headingPattern),r=getMatches(t,subheadingPattern),a=getTables(t);return a.forEach(function(t){var a=e.filter(function(e){return e.end<t.start}).map(function(t){return t.value});t.heading=last(a);var n=r.filter(function(e){return e.end<t.start}).map(function(t){return t.value});t.subheading=last(n),delete t.start,delete t.end}),a};module.exports=parseInfobox;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLm1pbi5qcyIsInNvdXJjZXMiOlsiLi4vdXRpbC9nZXRWYWx1ZS5qcyIsIi4uL2RhdGEtdHlwZXMvZGF0YVR5cGUuanMiLCIuLi91dGlsL2V4dHJhY3REYXRhLmpzIiwiLi4vdXRpbC9wcm9wZXJ0eUxpc3QuanMiLCIuLi91dGlsL2ZpbGxWYXJpYWJsZXMuanMiLCIuLi91dGlsL2V4dHJhY3RQcm9wZXJ0aWVzLmpzIiwiLi4vdXRpbC90cmFuc2Zvcm1Qcm9wZXJ0aWVzLmpzIiwiLi4vdXRpbC9leHRyYWN0SW5mb2JveGVzLmpzIiwiLi4vdXRpbC9jbGVhblNvdXJjZS5qcyIsIi4uL3V0aWwvcGFyc2VUYWJsZXMuanMiLCIuLi91dGlsL3BhcnNlQnNUYWJsZXMuanMiLCIuLi91dGlsL3BhcnNlTGlzdHMuanMiLCIuLi9pbmRleC5qcyIsIi4uL2RhdGEtdHlwZXMvc21hbGwuanMiLCIuLi9kYXRhLXR5cGVzL2ZsYWcuanMiLCIuLi9kYXRhLXR5cGVzL2Nvb3Jkcy5qcyIsIi4uL2RhdGEtdHlwZXMvaW5zdGFuY2VzLmpzIiwiLi4vZGF0YS10eXBlcy91bmJ1bGxldGVkTGlzdHMuanMiLCIuLi9kYXRhLXR5cGVzL3VubWFya2VkTGlzdHMuanMiLCIuLi9kYXRhLXR5cGVzL3BsYWluTGlzdHMuanMiLCIuLi9kYXRhLXR5cGVzL21hcnJpYWdlcy5qcyIsIi4uL2RhdGEtdHlwZXMvbmJheS5qcyIsIi4uL2RhdGEtdHlwZXMvb3RoZXIuanMiLCIuLi9kYXRhLXR5cGVzL2hsaXN0LmpzIiwiLi4vZGF0YS10eXBlcy9iaXJ0aERhdGVzLmpzIiwiLi4vZGF0YS10eXBlcy9sYWJlbGVkRGF0ZXMuanMiLCIuLi9kYXRhLXR5cGVzL2RlYXRoRGF0ZXMuanMiLCIuLi9kYXRhLXR5cGVzL3VybC5qcyIsIi4uL2RhdGEtdHlwZXMvd2Vic2l0ZS5qcyIsIi4uL2RhdGEtdHlwZXMvY29udmVydC5qcyIsIi4uL2RhdGEtdHlwZXMvZmlsbURhdGVzLmpzIiwiLi4vZGF0YS10eXBlcy9yZWYxLmpzIiwiLi4vZGF0YS10eXBlcy9yZWYyLmpzIiwiLi4vZGF0YS10eXBlcy9mb3JtYXROdW0uanMiLCIuLi9kYXRhLXR5cGVzL2luZGV4LmpzIiwiLi4vdXRpbC9udW1iZXJQYXJzZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBleHRyYVByb3BlcnR5UGF0dGVybiA9IC9cXG4/XFxzP1xcfFxccz9cXHcrJC87XG5jb25zdCBlbmRpbmdQYXR0ZXJuID0gL1xcblxcfVxcfSQvO1xuY29uc3QgbGlua3NQYXR0ZXJuID0gLygoXFwkXFx3K19cXGQrKVxccyosP1xccyopezIsfS9nO1xuY29uc3QgbGlua1NlcGFyYXRvclBhdHRlcm4gPSAvWyxcXHM/XS9nO1xuXG5mdW5jdGlvbiB0cmltV3JhcHBlcnMoc3RyKSB7XG4gIHJldHVybiBzdHJcbiAgICAucmVwbGFjZSgvXFxbXFxbL2csICcnKVxuICAgIC5yZXBsYWNlKC9cXF1cXF0vZywgJycpXG4gICAgLnJlcGxhY2UoL1xce1xcey9nLCAnJylcbiAgICAucmVwbGFjZSgvXFx9XFx9L2csICcnKVxuICAgIC50cmltKCk7XG59XG5cbmZ1bmN0aW9uIHRyaW1PcihzdHIpIHtcbiAgY29uc3Qgb3JQb3NpdGlvbiA9IHN0ci5pbmRleE9mKCd8Jyk7XG4gIGlmIChvclBvc2l0aW9uICE9PSAtMSkge1xuICAgIHJldHVybiBzdHIuc3Vic3RyaW5nKDAsIG9yUG9zaXRpb24pO1xuICB9XG4gIHJldHVybiBzdHI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFZhbHVlKHJhdywga2V5KSB7XG4gIGlmICghcmF3KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCBjbGVhbnNlZCA9IHJhd1xuICAgIC50cmltKClcbiAgICAucmVwbGFjZSgvRmlsZTovLCAnJylcbiAgICAvLyBIYXZlIG5vdCBmb3VuZCByZWFzb24gZm9yIHRoaXMgYnV0IGl0IGJyZWFrcyBwYXJzaW5nLCBzbyB3ZSBhcmUganVzdFxuICAgIC8vIHJlbW92aW5nIGl0IGZvciBub3dcbiAgICAucmVwbGFjZSgvXFx7XFx7XFxkK1xcfVxcfS9nLCAnJylcbiAgICAucmVwbGFjZShleHRyYVByb3BlcnR5UGF0dGVybiwgJycpXG4gICAgLnJlcGxhY2UoZW5kaW5nUGF0dGVybiwgJycpO1xuXG4gIGlmIChjbGVhbnNlZCA9PT0gJ3knIHx8IGNsZWFuc2VkID09PSAneWVzJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKGtleSA9PSAnYmlydGhQbGFjZScpIHtcbiAgICByZXR1cm4gcmF3LnRyaW0oKTtcbiAgfVxuXG4gIC8vIElzIGl0IGEgbGlzdCBvZiBsaW5rcz8/XG4gIGNvbnN0IGxpbmtzID0gY2xlYW5zZWQubWF0Y2gobGlua3NQYXR0ZXJuKTtcbiAgaWYgKGxpbmtzKSB7XG4gICAgcmV0dXJuIGxpbmtzWzBdLnNwbGl0KGxpbmtTZXBhcmF0b3JQYXR0ZXJuKS5maWx0ZXIodGV4dCA9PiB0ZXh0KTtcbiAgfVxuXG4gIHJldHVybiB0cmltT3IodHJpbVdyYXBwZXJzKGNsZWFuc2VkKSk7XG59XG4iLCJleHBvcnQgY29uc3QgRE9fTk9UX1JFUExBQ0UgPSBTeW1ib2woJ0RPIE5PVCBSRVBMQUNFJyk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRhdGFUeXBlKHsgZ2xvYmFsUGF0dGVybiwgcGFyc2VQYXR0ZXJuLCBwYXJzZSwgdmFyaWFibGUsIG5hbWUgfSkge1xuICByZXR1cm4gc291cmNlID0+IHtcbiAgICBjb25zdCBtYXRjaGVzID0gc291cmNlLm1hdGNoKGdsb2JhbFBhdHRlcm4pO1xuICAgIGlmICghbWF0Y2hlcykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgW25hbWVdOiBbXSxcbiAgICAgICAgc291cmNlQWZ0ZXI6IHNvdXJjZSxcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgaW5zdGFuY2VzID0gbWF0Y2hlcy5tYXAobWF0Y2ggPT4gcGFyc2UobWF0Y2gubWF0Y2gocGFyc2VQYXR0ZXJuKSkpO1xuICAgIGNvbnN0IHNvdXJjZUFmdGVyID0gbWF0Y2hlcy5yZWR1Y2UoKG1lbW8sIG1hdGNoLCBpbmRleCkgPT4ge1xuICAgICAgaWYgKGluc3RhbmNlc1tpbmRleF0gPT09IERPX05PVF9SRVBMQUNFKSB7XG4gICAgICAgIHJldHVybiBtZW1vO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1lbW8ucmVwbGFjZShtYXRjaCwgYCQke3ZhcmlhYmxlfV8ke2luZGV4fWApOyAgICAgIFxuICAgIH0sIHNvdXJjZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgW25hbWVdOiBpbnN0YW5jZXMsXG4gICAgICB9LFxuICAgICAgc291cmNlQWZ0ZXIsXG4gICAgfTtcbiAgfTtcbn1cbiIsImltcG9ydCBkYXRhVHlwZXMgZnJvbSAnLi4vZGF0YS10eXBlcy9pbmRleCc7XG5cbmZ1bmN0aW9uIGJ5RGF0YUhhbmRsZXIoeyBzb3VyY2UsIGNvbnRleHQgfSwgaGFuZGxlcikge1xuICBjb25zdCB7IGRhdGEsIHNvdXJjZUFmdGVyIH0gPSBoYW5kbGVyKHNvdXJjZSk7XG4gIHJldHVybiB7XG4gICAgY29udGV4dDogT2JqZWN0LmFzc2lnbih7fSwgY29udGV4dCwgZGF0YSksXG4gICAgc291cmNlOiBzb3VyY2VBZnRlcixcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZXh0cmFjdERhdGEoc291cmNlKSB7XG4gIHJldHVybiBkYXRhVHlwZXNcbiAgICAubWFwKHR5cGUgPT4gdHlwZS5oYW5kbGVyKVxuICAgIC5yZWR1Y2UoYnlEYXRhSGFuZGxlciwge1xuICAgICAgY29udGV4dDoge30sXG4gICAgICBzb3VyY2UsXG4gICAgfSk7XG59XG4iLCJpbXBvcnQgZ2V0VmFsdWUgZnJvbSAnLi9nZXRWYWx1ZSc7XG5pbXBvcnQgY2FtZWxDYXNlIGZyb20gJ2NhbWVsY2FzZSc7XG5cbmNvbnN0IGtleVZhbHVlR2xvYmFsUGF0dGVybiA9IC9cXHxcXHMqKFstJ1xcdTA0MDAtXFx1MDRGRlxcd1xcc10rKVxccyo9XFxzKihbXnxdKyk/L2c7XG5jb25zdCBrZXlWYWx1ZVBhdHRlcm4gPSAvXFx8XFxzKihbLSdcXHUwNDAwLVxcdTA0RkZcXHdcXHNdKylcXHMqPVxccyooW158XSspPy87XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZpbmRQcm9wZXJ0eUxpc3Qoc291cmNlKSB7XG4gIGNvbnN0IGtleVZhbHVlUGFpcnMgPSBzb3VyY2UubWF0Y2goa2V5VmFsdWVHbG9iYWxQYXR0ZXJuKTtcbiAgaWYgKCFrZXlWYWx1ZVBhaXJzKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIHJldHVybiBrZXlWYWx1ZVBhaXJzXG4gICAgLm1hcChtYXRjaCA9PiB7XG4gICAgICBjb25zdCByZXN1bHQgPSBrZXlWYWx1ZVBhdHRlcm4uZXhlYyhtYXRjaCk7XG4gICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IFssIHJhd0tleSwgcmF3VmFsdWVdID0gcmVzdWx0O1xuICAgICAgY29uc3Qga2V5ID0gY2FtZWxDYXNlKHJhd0tleS50cmltKCkpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAga2V5LFxuICAgICAgICB2YWx1ZTogZ2V0VmFsdWUocmF3VmFsdWUsIGtleSksXG4gICAgICB9O1xuICAgIH0pXG4gICAgLmZpbHRlcihpdGVtID0+IGl0ZW0pO1xufVxuIiwiaW1wb3J0IGRhdGFUeXBlcyBmcm9tICcuLi9kYXRhLXR5cGVzL2luZGV4JztcblxuZXhwb3J0IGZ1bmN0aW9uIGZpbGxWYXJpYWJsZSh2YWx1ZSwgY29udGV4dCwgeyBzaW1wbGlmeURhdGFWYWx1ZXMgfSA9IHt9KSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgY29uc29sZS5sb2coXG4gICAgICBgV2FybmluZzogU29tZXRoaW5nIHdlbnQgd3JvbmcuIENvdWxkIG5vdCBmaWxsIHZhcmlhYmxlcyBpbjogKCR7dHlwZW9mIHZhbHVlfSkgJHtKU09OLnN0cmluZ2lmeShcbiAgICAgICAgdmFsdWVcbiAgICAgICl9YFxuICAgICk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIGNvbnN0IGRhdGFUeXBlID0gZGF0YVR5cGVzLmZpbmQoKHR5cGUpID0+IHZhbHVlLm1hdGNoKHR5cGUucGF0dGVybikpO1xuICBpZiAoZGF0YVR5cGUpIHtcbiAgICBjb25zdCBbbWF0Y2hlZCwgaW5kZXhdID0gZGF0YVR5cGUucGF0dGVybi5leGVjKHZhbHVlKTtcbiAgICBjb25zdCBkYXRhVmFsdWUgPSBjb250ZXh0W2RhdGFUeXBlLm5hbWVdW3BhcnNlSW50KGluZGV4LCAxMCldO1xuICAgIGlmICghc2ltcGxpZnlEYXRhVmFsdWVzICYmIHR5cGVvZiBkYXRhVmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gdmFsdWUucmVwbGFjZShtYXRjaGVkLCBkYXRhVmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YVZhbHVlO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuLy8gUmVjdXJzaXZlIHZhcmFpYmxlIGZpbGxpbmcuLi4gZXZlbiBoYW5kbGVzIGFycmF5cyBvZiB2YWx1ZXNcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZpbGxWYXJpYWJsZXModmFsdWUsIGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWUubWFwKChpdGVtKSA9PiBmaWxsVmFyaWFibGVzKGl0ZW0sIGNvbnRleHQsIG9wdGlvbnMpKTtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyh2YWx1ZSkucmVkdWNlKChtZW1vLCBrZXkpID0+IHtcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKG1lbW8sIHtcbiAgICAgICAgW2tleV06IGZpbGxWYXJpYWJsZXModmFsdWVba2V5XSwgY29udGV4dCwgb3B0aW9ucyksXG4gICAgICB9KTtcbiAgICB9LCB7fSk7XG4gICAgLy8gcmV0dXJuIHZhbHVlLm1hcChpdGVtID0+IGZpbGxWYXJpYWJsZXMoaXRlbSwgY29udGV4dCwgb3B0aW9ucykpO1xuICB9XG4gIGNvbnN0IGZpbGxlZCA9IGZpbGxWYXJpYWJsZSh2YWx1ZSwgY29udGV4dCwgb3B0aW9ucyk7XG4gIGlmIChmaWxsZWQgPT09IHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHJldHVybiBmaWxsVmFyaWFibGVzKGZpbGxlZCwgY29udGV4dCwgb3B0aW9ucyk7XG59XG4iLCJpbXBvcnQgZGF0YVR5cGVzIGZyb20gJy4uL2RhdGEtdHlwZXMvaW5kZXgnO1xuaW1wb3J0IGZpbmRQcm9wZXJ0eUxpc3QgZnJvbSAnLi9wcm9wZXJ0eUxpc3QnO1xuaW1wb3J0IG51bWJlclBhcnNlIGZyb20gJy4vbnVtYmVyUGFyc2UnO1xuaW1wb3J0IGZpbGxWYXJpYWJsZXMgZnJvbSAnLi9maWxsVmFyaWFibGVzJztcblxuY29uc3Qgc21hbGxEYXRhVHlwZSA9IGRhdGFUeXBlcy5maW5kKCh0eXBlKSA9PiB0eXBlLm5hbWUgPT09ICdzbWFsbHMnKTtcblxuZnVuY3Rpb24gaGFuZGxlU21hbGxEYXRhKHZhbHVlLCBjb250ZXh0LCB7IHNpbXBsaWZ5RGF0YVZhbHVlcyB9KSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlLm1hdGNoKHNtYWxsRGF0YVR5cGUucGF0dGVybikpIHtcbiAgICBjb25zdCBwcmltYXJ5ID0gdmFsdWVcbiAgICAgIC5yZXBsYWNlKHNtYWxsRGF0YVR5cGUucGF0dGVybiwgJycpXG4gICAgICAvLyBDbGVhbmluZyB1cCBmcm9tIGluc2VydGVkIGNvbW1hc1xuICAgICAgLnJlcGxhY2UoLywvLCAnJylcbiAgICAgIC50cmltKCk7XG4gICAgY29uc3QgWywgaW5kZXhdID0gc21hbGxEYXRhVHlwZS5wYXR0ZXJuLmV4ZWModmFsdWUpO1xuICAgIGNvbnN0IHNlY29uZGFyeSA9IGNvbnRleHRbc21hbGxEYXRhVHlwZS5uYW1lXVtwYXJzZUludChpbmRleCwgMTApXTtcbiAgICBjb25zdCByZXN1bHQgPSB7XG4gICAgICBwcmltYXJ5OiBnZXRWYXJpYWJsZVZhbHVlKHByaW1hcnksIGNvbnRleHQsIHsgc2ltcGxpZnlEYXRhVmFsdWVzIH0pLFxuICAgICAgc2Vjb25kYXJ5OiBnZXRWYXJpYWJsZVZhbHVlKHNlY29uZGFyeSwgY29udGV4dCwgeyBzaW1wbGlmeURhdGFWYWx1ZXMgfSksXG4gICAgfTtcbiAgICByZXR1cm4gc2ltcGxpZnlEYXRhVmFsdWVzID8gcmVzdWx0LnByaW1hcnkgOiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGdldFZhcmlhYmxlVmFsdWUodmFsdWUsIGNvbnRleHQsIHsgc2ltcGxpZnlEYXRhVmFsdWVzIH0gPSB7fSkge1xuICAvLyBIYW5kbGluZyBzbWFsbCBkYXRhIGRpZmZlcmVudGx5Li4uIEkgZG9udCBsaWtlIHRoaXMuLi5cbiAgY29uc3Qgc21hbGxEYXRhID0gaGFuZGxlU21hbGxEYXRhKHZhbHVlLCBjb250ZXh0LCB7IHNpbXBsaWZ5RGF0YVZhbHVlcyB9KTtcbiAgaWYgKHNtYWxsRGF0YSkge1xuICAgIHJldHVybiBzbWFsbERhdGE7XG4gIH1cbiAgcmV0dXJuIGZpbGxWYXJpYWJsZXModmFsdWUsIGNvbnRleHQsIHsgc2ltcGxpZnlEYXRhVmFsdWVzIH0pO1xufVxuXG5mdW5jdGlvbiByZWR1Y2VWYXJpYWJsZShrZXksIHZhbHVlLCBjb250ZXh0LCBvcHRpb25zKSB7XG4gIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICAvLyBGaXJzdCBhcnJheSBwYXNzLi4uXG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZS5tYXAoKGl0ZW0pID0+IGdldFZhcmlhYmxlVmFsdWUoaXRlbSwgY29udGV4dCwgb3B0aW9ucykpO1xuICB9XG4gIGlmIChrZXkubWF0Y2goL2FyZWFUb3RhbC8pIHx8IGtleS5tYXRjaCgvcG9wdWxhdGlvbi8pKSB7XG4gICAgbGV0IGZsb2F0ID0gbnVtYmVyUGFyc2UodmFsdWUpO1xuICAgIGlmIChmbG9hdCA9PT0gZmFsc2UpIGZsb2F0ID0gcGFyc2VGbG9hdCh2YWx1ZSwgMTApO1xuICAgIGlmICghaXNOYU4oZmxvYXQpKSB7XG4gICAgICByZXR1cm4gZmxvYXQ7XG4gICAgfVxuICB9XG4gIGlmIChrZXkubWF0Y2goL2RhdGUvaSkpIHtcbiAgICBjb25zdCBkYXRlVmFsdWUgPSArbmV3IERhdGUodmFsdWUpO1xuICAgIGlmICghaXNOYU4oZGF0ZVZhbHVlKSkge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKHZhbHVlKTtcbiAgICB9XG4gIH1cbiAgY29uc3QgdmFyaWFibGVWYWx1ZSA9IGdldFZhcmlhYmxlVmFsdWUodmFsdWUsIGNvbnRleHQsIG9wdGlvbnMpO1xuXG4gIC8vIFNlY29uZCBhcnJheSBwYXNzLiBJZiBmaXJzdCB2YXJpYWJsZSB3YXMgYW4gYXJyYXkgb2YgdmFyaWFibGVzLlxuICBpZiAoQXJyYXkuaXNBcnJheSh2YXJpYWJsZVZhbHVlKSkge1xuICAgIHJldHVybiB2YXJpYWJsZVZhbHVlLm1hcCgoaXRlbSkgPT5cbiAgICAgIGdldFZhcmlhYmxlVmFsdWUoaXRlbSwgY29udGV4dCwgb3B0aW9ucylcbiAgICApO1xuICB9XG4gIHJldHVybiB2YXJpYWJsZVZhbHVlO1xufVxuXG5mdW5jdGlvbiBieVZhcmlhYmxlUmVkdWN0aW9uKGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIChtZW1vLCB7IGtleSwgdmFsdWUgfSkgPT4ge1xuICAgIGNvbnN0IHJlZHVjZWQgPSByZWR1Y2VWYXJpYWJsZShrZXksIHZhbHVlLCBjb250ZXh0LCBvcHRpb25zKTtcbiAgICBpZiAocmVkdWNlZCA9PT0gJycgfHwgcmVkdWNlZCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG1lbW87XG4gICAgfVxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBtZW1vLCB7XG4gICAgICBba2V5XTogcmVkdWNlZCxcbiAgICB9KTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZXh0cmFjdFByb3BlcnRpZXMoXG4gIHsgc291cmNlLCBjb250ZXh0IH0sXG4gIHsgc2ltcGxpZnlEYXRhVmFsdWVzID0gdHJ1ZSB9ID0ge31cbikge1xuICByZXR1cm4gZmluZFByb3BlcnR5TGlzdChzb3VyY2UpLnJlZHVjZShcbiAgICBieVZhcmlhYmxlUmVkdWN0aW9uKGNvbnRleHQsIHsgc2ltcGxpZnlEYXRhVmFsdWVzIH0pLFxuICAgIHt9XG4gICk7XG59XG4iLCIvLyBpbXBvcnQgZ2V0VmFsdWUgZnJvbSAnLi9nZXRWYWx1ZSc7XG5pbXBvcnQgY2FtZWxDYXNlIGZyb20gJ2NhbWVsY2FzZSc7XG5cbmNvbnN0IGJsYW5rTmFtZVBhdHRlcm4gPSAvYmxhbmsoXFxkKyk/TmFtZVNlYzIvO1xuY29uc3QgYmxhbmtJbmZvUGF0dGVybiA9IC9ibGFuayhcXGQrKT9JbmZvU2VjMi87XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyYW5zZm9ybVByb3BlcnRpZXMocHJvcGVydGllcykge1xuICByZXR1cm4gT2JqZWN0LmtleXMocHJvcGVydGllcylcbiAgICAucmVkdWNlKCh0cmFuc2Zvcm1lZCwga2V5KSA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHByb3BlcnRpZXNba2V5XTtcbiAgICAgIGNvbnN0IG1hdGNoID0ga2V5Lm1hdGNoKGJsYW5rTmFtZVBhdHRlcm4pO1xuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIGNvbnN0IGlkID0gbWF0Y2hbMV0gfHwgJyc7XG4gICAgICAgIGNvbnN0IGJsYW5rTmFtZSA9IHByb3BlcnRpZXNbYGJsYW5rJHtpZH1OYW1lU2VjMmBdO1xuICAgICAgICBjb25zdCBibGFua0luZm8gPSBwcm9wZXJ0aWVzW2BibGFuayR7aWR9SW5mb1NlYzJgXTtcbiAgICAgICAgaWYgKHR5cGVvZiBibGFua05hbWUgIT09ICdzdHJpbmcnKSByZXR1cm4gdHJhbnNmb3JtZWQ7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHRyYW5zZm9ybWVkLCB7XG4gICAgICAgICAgW2NhbWVsQ2FzZShibGFua05hbWUpXTogYmxhbmtJbmZvLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkubWF0Y2goYmxhbmtJbmZvUGF0dGVybikpIHtcbiAgICAgICAgcmV0dXJuIHRyYW5zZm9ybWVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24odHJhbnNmb3JtZWQsIHtcbiAgICAgICAgW2tleV06IHZhbHVlLFxuICAgICAgfSk7XG4gICAgfSwge30pO1xufVxuIiwiZnVuY3Rpb24gZmluZE91dGVySW5kZXgoc291cmNlKSB7XG5cdGxldCBsYXN0T3BlbiA9IFtdO1xuXHRmb3IgKGxldCBpID0gMDsgaSA8IHNvdXJjZS5sZW5ndGggLSAxOyBpKyspIHtcbiAgICBjb25zdCBuZXh0VHdvID0gc291cmNlLnN1YnN0cihpLCAyKTtcbiAgICBpZiAobmV4dFR3byA9PT0gJ3t7Jykge1xuXHRcdFx0bGFzdE9wZW4ucHVzaChpKTtcblx0XHRcdC8vIE1vdmUgZm9yd2FyZCwgc28gd2UgZG8gbm90IGNvdW50IGNsb3N1cmVzIHJpZ2h0IG5leHQgdG8gZWFjaCBvdGhlclxuXHRcdFx0aSsrO1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuICAgIGlmIChuZXh0VHdvID09PSAnfX0nKSB7XG5cdFx0XHRjb25zdCBvcGVuQXQgPSBsYXN0T3Blbi5wb3AoKTtcblx0XHRcdGlmIChsYXN0T3Blbi5sZW5ndGggPT09IDApIHtcblx0XHRcdFx0Ly8gQWRkaW5nIDIgaGVyZSBmb3IgdGhlIGNsb3N1cmVcblx0XHRcdFx0cmV0dXJuIGkgKyAyO1xuXHRcdFx0fVxuXHRcdFx0Ly8gTW92ZSBmb3J3YXJkLCBzbyB3ZSBkbyBub3QgY291bnQgY2xvc3VyZXMgcmlnaHQgbmV4dCB0byBlYWNoIG90aGVyXG5cdFx0XHRpKys7XG5cdFx0fSAgICBcbiAgfVxufVxuXG5jb25zdCBpbmZvQm94U3RhcnRQYXR0ZXJuID0gL3t7XFx3KmJveC87XG5cbmZ1bmN0aW9uIHBhcnNlKHNvdXJjZSkge1xuXHRjb25zdCBzdGFydE1hdGNoID0gc291cmNlLm1hdGNoKGluZm9Cb3hTdGFydFBhdHRlcm4pO1xuXHRpZiAoIXN0YXJ0TWF0Y2gpIHtcblx0XHQvLyBNYXkgbm90IGhhdmUgYSBhIHByb3BlciBpbmZvYm94IHdyYXBwZXIsIGxldCdzIHVzZSB0aGUgZW50aXJlIHNvdXJjZVxuXHRcdC8vIGJ5IGRlZmF1bHRcblx0XHRyZXR1cm4geyBkYXRhOiBzb3VyY2UsIHNvdXJjZUxlZnQ6IG51bGwgfTtcblx0fVxuXHRjb25zdCBzdGFydEluZGV4ID0gc3RhcnRNYXRjaC5pbmRleDtcblx0Y29uc3Qgd2l0aFN0YXJ0ID0gc291cmNlLnN1YnN0cmluZyhzdGFydEluZGV4KTtcblx0Y29uc3Qgb3V0ZXJJbmRleCA9IGZpbmRPdXRlckluZGV4KHdpdGhTdGFydCk7XG5cdGlmICghb3V0ZXJJbmRleCkge1xuXHRcdHJldHVybiB7IGRhdGE6IHNvdXJjZSwgc291cmNlTGVmdDogbnVsbCB9O1xuXHR9XG5cdGNvbnN0IGRhdGEgPSB3aXRoU3RhcnQuc3Vic3RyaW5nKDAsIG91dGVySW5kZXgpO1xuXHRjb25zdCBzb3VyY2VMZWZ0ID0gc291cmNlLnN1YnN0cmluZyhvdXRlckluZGV4KTtcblx0Y29uc3Qgc291cmNlTGVmdEhhc01hdGNoID0gISFzb3VyY2VMZWZ0Lm1hdGNoKGluZm9Cb3hTdGFydFBhdHRlcm4pO1xuXHRyZXR1cm4ge1xuXHRcdGRhdGEsXG5cdFx0c291cmNlTGVmdDogc291cmNlTGVmdEhhc01hdGNoID8gc291cmNlTGVmdCA6IG51bGxcblx0fTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZXh0cmFjdEluZm9ib3hlcyhzb3VyY2UpIHtcbiAgbGV0IHBhcnNlZCA9IHBhcnNlKHNvdXJjZSk7XG4gIGNvbnN0IGluZm9ib3hlcyA9IFtwYXJzZWQuZGF0YV07XG4gIHdoaWxlKHBhcnNlZC5zb3VyY2VMZWZ0KSB7XG4gIFx0cGFyc2VkID0gcGFyc2UocGFyc2VkLnNvdXJjZUxlZnQpO1xuICBcdGluZm9ib3hlcy5wdXNoKHBhcnNlZC5kYXRhKTtcbiAgfVxuICByZXR1cm4gaW5mb2JveGVzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2xlYW5Tb3VyY2UoXG4gIHNvdXJjZSxcbiAgeyByZW1vdmVTbWFsbCA9IGZhbHNlLCByZW1vdmVSZWZlcmVuY2VzID0gdHJ1ZSB9ID0ge31cbikge1xuICBpZiAocmVtb3ZlUmVmZXJlbmNlcykge1xuICAgIHNvdXJjZSA9IHNvdXJjZVxuICAgICAgLnJlcGxhY2UoLzxyZWYoXFxzXFx3Kz1bXj5dKyk/Pi4qPFxcL3JlZj4vZywgJycpXG4gICAgICAucmVwbGFjZSgvPHJlZihcXHNcXHcrPVtePl0rKT9cXHM/XFwvPi9nLCAnJyk7XG4gIH1cblxuICBpZiAocmVtb3ZlU21hbGwpIHtcbiAgICBzb3VyY2UgPSBzb3VyY2UucmVwbGFjZSgvPHNtYWxsPi4qPFxcL3NtYWxsPi9nLCAnJyk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIHNvdXJjZVxuICAgICAgLy8gUmVtb3ZlIHRpY2tzXG4gICAgICAucmVwbGFjZSgvJycnPy9nLCAnJylcbiAgICAgIC5yZXBsYWNlKC9cXHxkaXNwbGF5PWlubGluZS9nLCAnJylcbiAgICAgIC8vIFRoaXMgaXMgYSBsaXR0bGUgaWZmeVxuICAgICAgLnJlcGxhY2UoLzxiclxccz9cXC8/Pi9nLCAnLCcpXG4gICAgICAucmVwbGFjZSgvJm1pbnVzOy9nLCAnLScpXG4gICAgICAucmVwbGFjZSgvPHN1cD4vZywgJ14nKVxuICAgICAgLy8gUmVtb3ZlIHNob3J0ZW5lZCBmb290bm90ZSB0ZW1wbGF0ZXNcbiAgICAgIC5yZXBsYWNlKC9cXHtcXHtzZm5cXHwoW15cXH1cXH1dKylcXH1cXH0vZywgJycpXG4gICAgICAvLyBSZW1vdmUgZXhwbGFuYXRvcnkgZm9vdG5vdGVzXG4gICAgICAucmVwbGFjZSgvXFx7XFx7ZWZuXFx8KFteXFx9XFx9XSspXFx9XFx9L2csICcnKVxuICAgICAgLnJlcGxhY2UoL+KIki9nLCAnLScpXG4gICAgICAucmVwbGFjZSgvPFxcL3N1cD4vZywgJycpXG4gICAgICAvLyBSZXBsYWNlIG5vd3JhcCB0ZW1wbGF0ZSB3aXRoIGl0cyBjb250ZW50XG4gICAgICAucmVwbGFjZSgvXFx7XFx7XFxzKm5vd3JhcFxccypcXHwoW15cXG5cXH1dKylcXH1cXH0vZ2ksICckMScpXG4gICAgICAvLyBIVE1MIGNvbW1lbnRzXG4gICAgICAucmVwbGFjZSgvPCEtLShbXFxzXFxTXSo/KS0tPi9nLCAnJylcbiAgICAgIC5yZXBsYWNlKC8mbmJzcDsvZywgJyAnKVxuICAgICAgLnJlcGxhY2UoXCJ8JydTZWUgbGlzdCcnXCIsICcnKVxuICApO1xufVxuIiwiaW1wb3J0IGNhbWVsY2FzZSBmcm9tICdjYW1lbGNhc2UnO1xuaW1wb3J0IGV4dHJhY3REYXRhIGZyb20gJy4vZXh0cmFjdERhdGEnO1xuaW1wb3J0IGNsZWFuU291cmNlIGZyb20gJy4vY2xlYW5Tb3VyY2UnO1xuaW1wb3J0IGZpbGxWYXJpYWJsZXMsIHsgZmlsbFZhcmlhYmxlIH0gZnJvbSAnLi9maWxsVmFyaWFibGVzJztcblxuY29uc3QgdGFibGVTdGFydFBhdHRlcm4gPSAve1xcfCguKilcXG4/LztcbmNvbnN0IHRhYmxlRW5kUGF0dGVybiA9IC9cXG5cXHx9LztcbmNvbnN0IGhlYWRlcnNQYXR0ZXJuID0gLyFcXHM/KC4qKS9nO1xuY29uc3Qgcm93UGF0dGVybiA9IC9cXHwtLztcbmNvbnN0IGNlbGxTZXBhcmF0b3JQYXR0ZXJuID0gLyg/OlxcblxcfCl8KD86XFx8XFx8KS87XG5jb25zdCBsaW5rUGF0dGVybiA9IC9cXFtcXFsoW15cXF1dKylcXF1cXF0vZztcbmNvbnN0IGxpbmtOYW1lUGF0dGVybiA9IC9eLipcXHwvO1xuY29uc3QgaW5saW5lSGVhZGVyUGF0dGVybiA9ICchISc7XG5jb25zdCBhY3Rpb25QYXR0ZXJuID0gL3t7YW5jaG9yXFx8KC4qKX19L2c7XG5jb25zdCByb3dTcGFuQ291bnRQYXR0ZXJuID0gL3Jvd3NwYW49XCIoXFxkKylcIi87XG5cbmNvbnN0IHN0cmlwTGlua3MgPSAoc291cmNlKSA9PlxuICBzb3VyY2UucmVwbGFjZShsaW5rUGF0dGVybiwgKG0sIGNhcHR1cmUpID0+IHtcbiAgICBjb25zdCByZXN1bHQgPSBjYXB0dXJlLnJlcGxhY2UobGlua05hbWVQYXR0ZXJuLCAnJykudHJpbSgpO1xuICAgIHJldHVybiByZXN1bHQgfHwgY2FwdHVyZTtcbiAgfSk7XG5jb25zdCByZW1vdmVBY3Rpb25zID0gKHNvdXJjZSkgPT4gc291cmNlLnJlcGxhY2UoYWN0aW9uUGF0dGVybiwgJycpO1xuY29uc3QgdHJhbnNmb3JtQ2VsbCA9IChzb3VyY2UpID0+XG4gIHN0cmlwTGlua3MocmVtb3ZlQWN0aW9ucyhzb3VyY2UgfHwgJycpKVxuICAgIC5yZXBsYWNlKHJvd1NwYW5Db3VudFBhdHRlcm4sICcnKVxuICAgIC5yZXBsYWNlKGxpbmtOYW1lUGF0dGVybiwgJycpXG4gICAgLnRyaW0oKTtcblxuY29uc3QgdHJhbnNmb3JtQ2VsbHMgPSAocm93KSA9PlxuICByb3cuc3BsaXQoY2VsbFNlcGFyYXRvclBhdHRlcm4pLm1hcCh0cmFuc2Zvcm1DZWxsKTtcblxuY29uc3QgZmluZEluZGV4ID0gKHQsIHApID0+IHtcbiAgY29uc3QgbSA9IHQubWF0Y2gocCk7XG4gIHJldHVybiBtID8gbS5pbmRleCA6IC0xO1xufTtcblxuY29uc3QgZmluZFRhYmxlU3RhcnQgPSAoc291cmNlKSA9PiB7XG4gIGNvbnN0IG0gPSBzb3VyY2UubWF0Y2godGFibGVTdGFydFBhdHRlcm4pO1xuICByZXR1cm4gbSA/IG0uaW5kZXggKyBtWzBdLmxlbmd0aCA6IC0xO1xufTtcbmNvbnN0IGZpbmRUYWJsZUVuZCA9IChzb3VyY2UpID0+IGZpbmRJbmRleChzb3VyY2UsIHRhYmxlRW5kUGF0dGVybik7XG5cbmNvbnN0IGdldEhlYWRlcnMgPSAoc291cmNlKSA9PiB7XG4gIGNvbnN0IGhlYWRlcnMgPSBbXTtcbiAgbGV0IG1hdGNoO1xuICB3aGlsZSAoKG1hdGNoID0gaGVhZGVyc1BhdHRlcm4uZXhlYyhzb3VyY2UpKSkge1xuICAgIGhlYWRlcnMucHVzaCguLi5tYXRjaFsxXS5zcGxpdChpbmxpbmVIZWFkZXJQYXR0ZXJuKS5tYXAodHJhbnNmb3JtQ2VsbCkpO1xuICB9XG4gIHJldHVybiBoZWFkZXJzO1xufTtcblxuZnVuY3Rpb24gdHJhbnNmb3JtUm93U3Bhbihyb3dzKSB7XG4gIHJldHVybiByb3dzXG4gICAgLm1hcCh0cmFuc2Zvcm1DZWxscylcbiAgICAucmVkdWNlKChtZXJnZWQsIGNlbGxzLCBpbmRleCkgPT4ge1xuICAgICAgY29uc3QgayA9IGluZGV4ID09PSAwID8gMCA6IDE7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNlbGxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICghbWVyZ2VkW2kgKyBrXSkgbWVyZ2VkW2kgKyBrXSA9IHt9O1xuICAgICAgICBpZiAoY2VsbHNbaV0pIHtcbiAgICAgICAgICBtZXJnZWRbaSArIGtdW2NlbGxzW2ldXSA9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBtZXJnZWQ7XG4gICAgfSwgW10pXG4gICAgLm1hcCgobykgPT4gT2JqZWN0LmtleXMobykuam9pbignLCcpKVxuICAgIC5qb2luKCcgfHwgJyk7XG59XG5cbmNvbnN0IGdldFJvd3MgPSAoc291cmNlKSA9PiB7XG4gIGNvbnN0IHJhdyA9IHNvdXJjZVxuICAgIC5zcGxpdChyb3dQYXR0ZXJuKVxuICAgIC5tYXAoKGUpID0+IGUucmVwbGFjZSgvXi4qXFxuKz9cXHwvLCAnJykudHJpbSgpKVxuICAgIC5maWx0ZXIoKGUpID0+IGUpO1xuXG4gIGNvbnN0IHJvd3MgPSBbXTtcbiAgbGV0IHNwYW5OID0gMDtcbiAgbGV0IHNwYW5Db3VudCA9IDA7XG4gIGxldCByb3dzSW5TcGFuID0gW107XG5cbiAgZm9yIChjb25zdCByb3cgb2YgcmF3KSB7XG4gICAgY29uc3QgbWF0Y2ggPSByb3cubWF0Y2gocm93U3BhbkNvdW50UGF0dGVybik7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICBzcGFuTiA9IDA7XG4gICAgICBzcGFuQ291bnQgPSBwYXJzZUludChtYXRjaFsxXSk7XG4gICAgICByb3dzSW5TcGFuID0gW107XG4gICAgfVxuICAgIGlmIChzcGFuTiA8IHNwYW5Db3VudCkge1xuICAgICAgcm93c0luU3Bhbi5wdXNoKHJvdyk7XG4gICAgICBpZiAoKytzcGFuTiA9PT0gc3BhbkNvdW50KSB7XG4gICAgICAgIHJvd3MucHVzaCh0cmFuc2Zvcm1Sb3dTcGFuKHJvd3NJblNwYW4pKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcm93cy5wdXNoKHJvdyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJvd3M7XG59O1xuXG5jb25zdCBnZXROZXh0VGFibGUgPSAoc291cmNlLCBjb250ZXh0LCBvcHRpb25zKSA9PiB7XG4gIGxldCBsZWZ0ID0gc291cmNlO1xuICBjb25zdCBzdGFydCA9IGZpbmRUYWJsZVN0YXJ0KGxlZnQpO1xuXG4gIGlmIChzdGFydCA9PT0gLTEpIHJldHVybiBudWxsO1xuICBsZWZ0ID0gbGVmdC5zdWJzdHJpbmcoc3RhcnQpO1xuXG4gIGNvbnN0IGVuZCA9IGZpbmRUYWJsZUVuZChsZWZ0KTtcblxuICBpZiAoZW5kID09PSAtMSkgcmV0dXJuIG51bGw7XG4gIGxlZnQgPSBsZWZ0LnN1YnN0cmluZygwLCBlbmQpO1xuXG4gIGNvbnN0IHJvd3MgPSBnZXRSb3dzKGxlZnQpO1xuXG4gIGlmICghcm93cy5sZW5ndGgpIHJldHVybiBudWxsO1xuXG4gIGNvbnN0IGhlYWRlcnMgPSBnZXRIZWFkZXJzKHJvd3NbMF0pO1xuXG4gIGlmICghaGVhZGVycy5sZW5ndGgpIHJldHVybiBudWxsO1xuXG4gIGNvbnN0IGRhdGEgPSByb3dzXG4gICAgLnNsaWNlKDEpXG4gICAgLm1hcCh0cmFuc2Zvcm1DZWxscylcbiAgICAubWFwKChyb3cpID0+IHtcbiAgICAgIHJldHVybiBoZWFkZXJzLnJlZHVjZSgob2JqLCBrZXksIGluZGV4KSA9PiB7XG4gICAgICAgIG9ialtjYW1lbGNhc2UoZmlsbFZhcmlhYmxlKGtleSwgY29udGV4dCwgb3B0aW9ucykpXSA9IGZpbGxWYXJpYWJsZXMoXG4gICAgICAgICAgcm93W2luZGV4XSxcbiAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgIG9wdGlvbnNcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgIH0sIHt9KTtcbiAgICB9KTtcblxuICByZXR1cm4geyBkYXRhLCBlbmQ6IHN0YXJ0ICsgZW5kIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoc291cmNlLCBvcHRpb25zKSB7XG4gIGNvbnN0IGNsZWFuZWRTb3VyY2UgPSBjbGVhblNvdXJjZShzb3VyY2UsIG9wdGlvbnMpO1xuICBjb25zdCBkYXRhID0gZXh0cmFjdERhdGEoY2xlYW5lZFNvdXJjZSk7XG4gIGNvbnN0IHRhYmxlcyA9IFtdO1xuICBsZXQgbGVmdCA9IGRhdGEuc291cmNlO1xuICBsZXQgcmVzdWx0ID0gbnVsbDtcbiAgd2hpbGUgKChyZXN1bHQgPSBnZXROZXh0VGFibGUobGVmdCwgZGF0YS5jb250ZXh0LCBvcHRpb25zKSkpIHtcbiAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgcmV0dXJuIHRhYmxlcztcbiAgICB9XG4gICAgdGFibGVzLnB1c2gocmVzdWx0LmRhdGEpO1xuICAgIGxlZnQgPSBsZWZ0LnN1YnN0cmluZyhyZXN1bHQuZW5kKTtcbiAgfVxuICByZXR1cm4gdGFibGVzO1xufVxuIiwiY29uc3QgbGlua1BhdHRlcm4gPSAvXFxbXFxbKFteXFxdXSspXFxdXFxdL2c7XG5jb25zdCBrbVBhdHRlcm4gPSAve3tCU2ttXFx8KFtcXGR4XSssW1xcZHhdKylcXHwoW1xcZHhdKyxbXFxkeF0rKX19L2c7XG5cbmZ1bmN0aW9uIGNsZWFuKHRleHQpIHtcbiAgcmV0dXJuIHRleHRcbiAgICAuc3Vic3RyaW5nKDIsIHRleHQubGVuZ3RoIC0gMilcbiAgICAucmVwbGFjZShsaW5rUGF0dGVybiwgKG0sIHgpID0+IHguc3BsaXQoJ3wnKVswXSlcbiAgICAucmVwbGFjZSgvJycnPy9nLCAnJyk7XG59XG5cbi8vIFNvdXJjZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvV2lraXBlZGlhOlJvdXRlX2RpYWdyYW1fdGVtcGxhdGUje3tCUy1tYXB9fV9yb3dzX3dpdGhfaWNvbnNfYW5kX3RleHRcbmZ1bmN0aW9uIHBhcnNlUm93KHJhdykge1xuICBsZXQgY291bnRNYXRjaCA9IHJhd1swXS5tYXRjaCgvQlMoXFxkKS8pO1xuICBsZXQgdHlwZSA9IHJhd1swXS5zdWJzdHJpbmcoMik7XG4gIGxldCBjb3VudCA9IDE7XG4gIGxldCBpY29ucyA9IFtdO1xuICBsZXQgaW5kZXggPSAxO1xuICBpZiAoY291bnRNYXRjaCkge1xuICAgIGNvdW50ID0gY291bnRNYXRjaFsxXTtcbiAgICB0eXBlID0gcmF3WzBdLnN1YnN0cmluZygzKTtcbiAgfVxuICBmb3IgKDsgaW5kZXggPD0gY291bnQ7IGluZGV4KyspIHtcbiAgICBpY29ucy5wdXNoKHJhd1tpbmRleF0pO1xuICB9XG4gIGNvbnN0IG1hcmdpbiA9IHJhd1tpbmRleCsrXTtcbiAgY29uc3QgdGV4dDEgPSByYXdbaW5kZXgrK107XG4gIGNvbnN0IHRleHQyID0gcmF3W2luZGV4KytdO1xuICBjb25zdCBjb21tZW50ID0gcmF3W2luZGV4KytdO1xuICByZXR1cm4ge1xuICAgIHR5cGUsXG4gICAgbWFyZ2luLFxuICAgIHRleHQxLFxuICAgIHRleHQyLFxuICAgIGNvbW1lbnQsXG4gICAgaWNvbnMsXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgY29uc3QgcmVzdWx0cyA9IHNvdXJjZS5yZXBsYWNlKGttUGF0dGVybiwgJyQxLyQyJykubWF0Y2goL3t7QlMoW159fV0rKX19L2cpO1xuICBpZiAocmVzdWx0cykge1xuICAgIHJldHVybiByZXN1bHRzXG4gICAgICAubWFwKChyZXN1bHQpID0+IGNsZWFuKHJlc3VsdCkuc3BsaXQoJ3wnKSlcbiAgICAgIC5tYXAocGFyc2VSb3cpXG4gICAgICAuZmlsdGVyKCh7IHR5cGUgfSkgPT4gdHlwZVswXSAhPT0gJy0nKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbiIsImNvbnN0IGhlYWRpbmdQYXR0ZXJuID0gL1tePV09PVxccz8oW1xcd1xcc10rKVxccz89PS9nXG5jb25zdCBzdWJoZWFkaW5nUGF0dGVybiA9IC89PT0oW1xcd1xcc10rKT09PS9nXG5jb25zdCB0YWJsZVN0YXJ0UGF0dGVybiA9IC97e2xpc3QuK3N0YXJ0Lip9fS9naVxuY29uc3QgdGFibGVFbmRQYXR0ZXJuID0gL3t7bGlzdC4rZW5kLip9fS9naVxuY29uc3Qgcm93UGF0dGVybiA9IC97eyguKil9fS9nXG5jb25zdCByb3dQYXR0ZXJuU2luZ2xlID0gL3t7KC4qKX19L1xuXG5mdW5jdGlvbiBnZXRIZWFkaW5ncyh0ZXh0KSB7XG5cdGxldCBtYXRjaDtcblx0Y29uc3QgaGVhZGluZ3MgPSBbXTtcblx0d2hpbGUgKChtYXRjaCA9IGhlYWRpbmdQYXR0ZXJuLmV4ZWModGV4dCkpICE9PSBudWxsKSB7XG5cdFx0aGVhZGluZ3MucHVzaCh7XG5cdFx0XHRoZWFkaW5nOiBtYXRjaFsxXS50cmltKCksXG5cdFx0XHRzdGFydDogbWF0Y2guaW5kZXgsXG5cdFx0XHRlbmQ6IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoXG5cdFx0fSlcblx0fVxuXHRyZXR1cm4gaGVhZGluZ3M7XG59XG5cbmZ1bmN0aW9uIGdldFN1YmhlYWRpbmdzKHRleHQpIHtcblx0bGV0IG1hdGNoO1xuXHRjb25zdCBzdWJoZWFkaW5ncyA9IFtdO1xuXHR3aGlsZSAoKG1hdGNoID0gc3ViaGVhZGluZ1BhdHRlcm4uZXhlYyh0ZXh0KSkgIT09IG51bGwpIHtcblx0XHRzdWJoZWFkaW5ncy5wdXNoKHtcblx0XHRcdGhlYWRpbmc6IG1hdGNoWzFdLnRyaW0oKSxcblx0XHRcdHN0YXJ0OiBtYXRjaC5pbmRleCxcblx0XHRcdGVuZDogbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGhcblx0XHR9KVxuXHR9XG5cdHJldHVybiBzdWJoZWFkaW5ncztcbn1cblxuZnVuY3Rpb24gZ2V0TWF0Y2hlcyh0ZXh0LCBwYXR0ZXJuKSB7XG5cdGxldCBtYXRjaDtcblx0Y29uc3QgbWF0Y2hlcyA9IFtdO1xuXHR3aGlsZSAoKG1hdGNoID0gcGF0dGVybi5leGVjKHRleHQpKSAhPT0gbnVsbCkge1xuXHRcdG1hdGNoZXMucHVzaCh7XG5cdFx0XHR2YWx1ZTogbWF0Y2hbMV0gJiYgbWF0Y2hbMV0udHJpbSgpLFxuXHRcdFx0c3RhcnQ6IG1hdGNoLmluZGV4LFxuXHRcdFx0ZW5kOiBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aFxuXHRcdH0pXG5cdH1cblx0cmV0dXJuIG1hdGNoZXM7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVGFibGVEYXRhKHJhdykge1xuXHRjb25zdCBtYXRjaGVzID0gcmF3Lm1hdGNoKHJvd1BhdHRlcm4pO1xuXHRpZiAoIW1hdGNoZXMpIHJldHVybiBbXTtcblx0cmV0dXJuIG1hdGNoZXMubWFwKGVsID0+IHtcblx0XHRjb25zdCBbLHRleHRdID0gZWwubWF0Y2gocm93UGF0dGVyblNpbmdsZSk7XG5cdFx0Y29uc3QgY29sdW1ucyA9IHRleHQudHJpbSgpLnNwbGl0KCd8Jyk7XG5cdFx0cmV0dXJuIGNvbHVtbnMuc2xpY2UoMSk7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBnZXRUYWJsZXModGV4dCkge1xuXHRjb25zdCB0YWJsZVN0YXJ0cyA9IGdldE1hdGNoZXModGV4dCwgdGFibGVTdGFydFBhdHRlcm4pO1xuXHRjb25zdCB0YWJsZUVuZHMgPSBnZXRNYXRjaGVzKHRleHQsIHRhYmxlRW5kUGF0dGVybik7XG5cdHJldHVybiB0YWJsZVN0YXJ0cy5tYXAoKHRhYmxlU3RhcnQsIGluZGV4KSA9PiB7XG5cdFx0Y29uc3QgdGFibGVFbmQgPSB0YWJsZUVuZHNbaW5kZXhdO1xuXHRcdGlmICghdGFibGVFbmQpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignW1RhYmxlIFBhcnNpbmddIEZhaWxlZCB0byBwYWlyIHRhYmxlJyk7XG5cdFx0fVxuXHRcdGNvbnN0IHJhdyA9IHRleHRcblx0XHRcdFx0LnN1YnN0cmluZyh0YWJsZVN0YXJ0LmVuZCwgdGFibGVFbmQuc3RhcnQpXG5cdFx0XHRcdC50cmltKClcblx0XHRcdFx0LnJlcGxhY2UoLycnJy9nLCAnJyk7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHJvd3M6IHBhcnNlVGFibGVEYXRhKHJhdyksXG5cdFx0XHRzdGFydDogdGFibGVTdGFydC5zdGFydCxcblx0XHRcdGVuZDogdGFibGVFbmQuZW5kXG5cdFx0fVxuXHR9KTtcbn1cblxuZnVuY3Rpb24gbGFzdChsaXN0KSB7XG5cdHJldHVybiBsaXN0Lmxlbmd0aCA/IGxpc3RbbGlzdC5sZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKHNvdXJjZSkge1xuXHRjb25zdCBoZWFkaW5ncyA9IGdldE1hdGNoZXMoc291cmNlLCBoZWFkaW5nUGF0dGVybik7XG5cdGNvbnN0IHN1YmhlYWRpbmdzID0gZ2V0TWF0Y2hlcyhzb3VyY2UsIHN1YmhlYWRpbmdQYXR0ZXJuKTtcblx0Y29uc3QgdGFibGVzID0gZ2V0VGFibGVzKHNvdXJjZSk7XG5cblx0dGFibGVzLmZvckVhY2godGFibGUgPT4ge1xuXHRcdGNvbnN0IGhlYWRpbmdzQmVmb3JlID0gaGVhZGluZ3MuZmlsdGVyKGhlYWRpbmcgPT4ge1xuXHRcdFx0cmV0dXJuIGhlYWRpbmcuZW5kIDwgdGFibGUuc3RhcnQ7XG5cdFx0fSkubWFwKGUgPT4gZS52YWx1ZSlcblx0XHR0YWJsZS5oZWFkaW5nID0gbGFzdChoZWFkaW5nc0JlZm9yZSk7XG5cdFx0Y29uc3Qgc3ViaGVhZGluZ3NCZWZvcmUgPSBzdWJoZWFkaW5ncy5maWx0ZXIoc3ViaGVhZGluZyA9PiB7XG5cdFx0XHRyZXR1cm4gc3ViaGVhZGluZy5lbmQgPCB0YWJsZS5zdGFydDtcblx0XHR9KS5tYXAoZSA9PiBlLnZhbHVlKVxuXHRcdHRhYmxlLnN1YmhlYWRpbmcgPSBsYXN0KHN1YmhlYWRpbmdzQmVmb3JlKTtcblx0XHRkZWxldGUgdGFibGUuc3RhcnQ7XG5cdFx0ZGVsZXRlIHRhYmxlLmVuZDtcblx0fSk7XG5cblx0cmV0dXJuIHRhYmxlcztcbn0iLCJpbXBvcnQgY2FtZWxDYXNlIGZyb20gJ2NhbWVsY2FzZSc7XG5pbXBvcnQgZXh0cmFjdERhdGEgZnJvbSAnLi91dGlsL2V4dHJhY3REYXRhJztcbmltcG9ydCBleHRyYWN0UHJvcGVydGllcyBmcm9tICcuL3V0aWwvZXh0cmFjdFByb3BlcnRpZXMnO1xuaW1wb3J0IHRyYW5zZm9ybVByb3BlcnRpZXMgZnJvbSAnLi91dGlsL3RyYW5zZm9ybVByb3BlcnRpZXMnO1xuaW1wb3J0IGV4dHJhY3RJbmZvYm94ZXMgZnJvbSAnLi91dGlsL2V4dHJhY3RJbmZvYm94ZXMnO1xuaW1wb3J0IGNsZWFuU291cmNlIGZyb20gJy4vdXRpbC9jbGVhblNvdXJjZSc7XG5pbXBvcnQgcGFyc2VUYWJsZXMgZnJvbSAnLi91dGlsL3BhcnNlVGFibGVzJztcbmltcG9ydCBwYXJzZUJzVGFibGVzIGZyb20gJy4vdXRpbC9wYXJzZUJzVGFibGVzJztcbmltcG9ydCBwYXJzZUxpc3RzIGZyb20gJy4vdXRpbC9wYXJzZUxpc3RzJztcblxuLyoqXG4gKiBQYXJzZSBXaWtpIEluZm9ib3ggVGV4dFxuICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZSAtIEluZm9ib3ggc291cmNlIHRleHRcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gUGFyc2luZyBvcHRpb25zXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnNpbXBsaWZ5RGF0YVZhbHVlcz10cnVlXSAtIE9ubHkgdXNlIHByaW1hcnkgZGF0YSB2YWx1ZXNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucmVtb3ZlU21hbGw9ZmFsc2VdIC0gUmVtb3ZlIDxzbWFsbD4uLi48L3NtYWxsPiBjaHVua3Mgb2Ygc291cmNlIGRhdGFcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucmVtb3ZlUmVmZXJlbmNlcz10cnVlXSAtIFJlbW92ZSA8cmVmPi4uLjwvcmVmPiBjaHVua3Mgb2Ygc291cmNlIGRhdGFcbiAqIEByZXR1cm5zIHtPYmplY3R9IFN0cnVjdHVyZWQgaW5mb3JtYXRpb24gZnJvbSBzb3VyY2UgdGV4dFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwYXJzZUluZm9ib3goc291cmNlLCBvcHRpb25zKSB7XG4gIGNvbnN0IGluZm9ib3hlcyA9IGV4dHJhY3RJbmZvYm94ZXMoc291cmNlKS5tYXAoKGluZm9ib3gpID0+IHtcbiAgICBjb25zdCBjbGVhbmVkU291cmNlID0gY2xlYW5Tb3VyY2UoaW5mb2JveCwgb3B0aW9ucyk7XG4gICAgY29uc3QgZGF0YSA9IGV4dHJhY3REYXRhKGNsZWFuZWRTb3VyY2UpO1xuICAgIGNvbnN0IHByb3BzID0gZXh0cmFjdFByb3BlcnRpZXMoZGF0YSwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIHRyYW5zZm9ybVByb3BlcnRpZXMocHJvcHMpO1xuICB9KTtcblxuICBpZiAoIWluZm9ib3hlcy5sZW5ndGgpIHJldHVybiB7fTtcblxuICBjb25zdCByZXMgPSB7XG4gICAgLy8gRmlyc3QgaW5mb2JveCBzaG91bGQgYmUgdGhlIG1haW4gb25lXG4gICAgZ2VuZXJhbDogaW5mb2JveGVzLnNoaWZ0KCksXG4gIH07XG5cbiAgaW5mb2JveGVzLmZvckVhY2goKG5leHQpID0+IHtcbiAgICBjb25zdCB0eXBlID0gbmV4dC50eXBlO1xuICAgIGlmICh0eXBlKSB7XG4gICAgICByZXNbY2FtZWxDYXNlKHR5cGUpXSA9IG5leHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIE9iamVjdC5hc3NpZ24ocmVzLCB7XG4gICAgICAgIGdlbmVyYWw6IE9iamVjdC5hc3NpZ24oe30sIHJlcy5nZW5lcmFsLCBuZXh0KSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgcmVzLnRhYmxlcyA9IHBhcnNlVGFibGVzKHNvdXJjZSk7XG4gIHJlcy5ic1RhYmxlcyA9IHBhcnNlQnNUYWJsZXMoc291cmNlKTtcbiAgcmVzLmxpc3RzID0gcGFyc2VMaXN0cyhzb3VyY2UpO1xuXG4gIHJldHVybiByZXM7XG59XG4iLCJjb25zdCBzbWFsbEdsb2JhbFBhdHRlcm4gPSAvXFx7XFx7c21hbGxcXHwoW15cXH1cXH1dKylcXH1cXH0vZztcbmNvbnN0IHNtYWxsUGF0dGVybiA9IC9zbWFsbFxcfChbXlxcfVxcfV0rKVxcfVxcfS87XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2xvYmFsUGF0dGVybjogc21hbGxHbG9iYWxQYXR0ZXJuLFxuICBwYXJzZVBhdHRlcm46IHNtYWxsUGF0dGVybixcbiAgcGFyc2U6IHJlc3VsdHMgPT4ge1xuICAgIGNvbnN0IFssIHZhbHVlXSA9IHJlc3VsdHM7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9LFxuICB2YXJpYWJsZTogJ1NNQUxMJyxcbiAgbmFtZTogJ3NtYWxscycsXG59O1xuIiwiY29uc3QgZmxhZ0dsb2JhbFBhdHRlcm4gPSAvXFx7XFx7ZmxhZ1xcfChbXlxcfVxcfV0rKVxcfVxcfS9nO1xuY29uc3QgZmxhZ1BhdHRlcm4gPSAvZmxhZ1xcfChbXlxcfVxcfV0rKVxcfVxcfS87XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2xvYmFsUGF0dGVybjogZmxhZ0dsb2JhbFBhdHRlcm4sXG4gIHBhcnNlUGF0dGVybjogZmxhZ1BhdHRlcm4sXG4gIHBhcnNlOiByZXN1bHRzID0+IHtcbiAgICBjb25zdCBbLCB2YWx1ZV0gPSByZXN1bHRzO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcbiAgdmFyaWFibGU6ICdGTEFHJyxcbiAgbmFtZTogJ2ZsYWdzJyxcbn07XG4iLCJjb25zdCBjb29yZHNHbG9iYWxQYXR0ZXJuID0gL1xce1xce2Nvb3JkXFx8KFteXFx9XFx9XSspXFx9XFx9L2c7XG5jb25zdCBjb29yZHNQYXR0ZXJuID0gL2Nvb3JkXFx8KFteXFx9XFx9XSspXFx9XFx9LztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBnbG9iYWxQYXR0ZXJuOiBjb29yZHNHbG9iYWxQYXR0ZXJuLFxuICBwYXJzZVBhdHRlcm46IGNvb3Jkc1BhdHRlcm4sXG4gIHBhcnNlOiByZXN1bHRzID0+IHtcbiAgICBjb25zdCBbLCB2YWx1ZV0gPSByZXN1bHRzO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcbiAgdmFyaWFibGU6ICdDT09SRCcsXG4gIG5hbWU6ICdjb29yZHMnLFxufTtcbiIsImNvbnN0IGdsb2JhbFBhdHRlcm4gPSAvXFxbXFxbKFteXFxdXFx8XSspXFx8PyhbXlxcXV0rKT9cXF1cXF0vZztcbmNvbnN0IHBhdHRlcm4gPSAvXFxbXFxbKFteXFxdXFx8XSspXFx8PyhbXlxcXV0rKT9cXF1cXF0vO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdsb2JhbFBhdHRlcm46IGdsb2JhbFBhdHRlcm4sXG4gIHBhcnNlUGF0dGVybjogcGF0dGVybixcbiAgcGFyc2U6IHJlc3VsdHMgPT4ge1xuICAgIGNvbnN0IFssIHZhbHVlLCB0eXBlXSA9IHJlc3VsdHM7XG4gICAgcmV0dXJuIHZhbHVlIHx8IHR5cGU7XG4gIH0sXG4gIHZhcmlhYmxlOiAnSU5TVEFOQ0UnLFxuICBuYW1lOiAnaW5zdGFuY2VzJyxcbn07XG4iLCJpbXBvcnQgZ2V0VmFsdWUgZnJvbSAnLi4vdXRpbC9nZXRWYWx1ZSc7XG5cbmNvbnN0IGxpc3RJdGVtUHJlZml4UGF0dGVybiA9IC9eXFx8XFxzPy87XG5jb25zdCB1bmJ1bGxldGVkTGlzdEdsb2JhbFBhdHRlcm4gPSAvXFx7XFx7KD86dW5idWxsZXRlZCBsaXN0fHVibHx1YnR8dWJsaXN0fHVuYnVsbGV0KVxccz9cXHwoW15cXH1cXH1dKylcXH1cXH0vZ2k7XG5jb25zdCB1bmJ1bGxldGVkTGlzdEl0ZW1QYXR0ZXJuID0gL1xcfFxccyooW158fV0rKS9nO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdsb2JhbFBhdHRlcm46IHVuYnVsbGV0ZWRMaXN0R2xvYmFsUGF0dGVybixcbiAgcGFyc2VQYXR0ZXJuOiB1bmJ1bGxldGVkTGlzdEl0ZW1QYXR0ZXJuLFxuICBwYXJzZTogKGxpc3RJdGVtcykgPT4ge1xuICAgIGlmICghbGlzdEl0ZW1zKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIHJldHVybiBsaXN0SXRlbXNcbiAgICAgIC5tYXAoKGl0ZW0pID0+IGl0ZW0ucmVwbGFjZShsaXN0SXRlbVByZWZpeFBhdHRlcm4sICcnKS50cmltKCkpXG4gICAgICAuZmlsdGVyKCh2YWx1ZSkgPT4gdmFsdWUgJiYgdmFsdWUubGVuZ3RoKTtcbiAgfSxcbiAgdmFyaWFibGU6ICdVTkJVTExFVEVEX0xJU1QnLFxuICBuYW1lOiAndW5idWxsZXRlZExpc3RzJyxcbn07XG4iLCJjb25zdCBsaXN0SXRlbVByZWZpeFBhdHRlcm4gPSAvXlxcKlxccyovO1xuY29uc3QgcGxhaW5MaXN0R2xvYmFsUGF0dGVybiA9IC9cXG4oXFwqXFxzKlteKnxdKykrL2c7XG5jb25zdCBwbGFpbkxpc3RJdGVtUGF0dGVybiA9IC9cXCpcXHMqKFteKnxdKykvZztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBnbG9iYWxQYXR0ZXJuOiBwbGFpbkxpc3RHbG9iYWxQYXR0ZXJuLFxuICBwYXJzZVBhdHRlcm46IHBsYWluTGlzdEl0ZW1QYXR0ZXJuLFxuICBwYXJzZTogbGlzdEl0ZW1zID0+IHtcbiAgICBpZiAoIWxpc3RJdGVtcykge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICByZXR1cm4gbGlzdEl0ZW1zXG4gICAgICAubWFwKGl0ZW0gPT4gaXRlbS5yZXBsYWNlKGxpc3RJdGVtUHJlZml4UGF0dGVybiwgJycpLnRyaW0oKSlcbiAgICAgIC5maWx0ZXIodmFsdWUgPT4gdmFsdWUgJiYgdmFsdWUubGVuZ3RoKTtcbiAgfSxcbiAgdmFyaWFibGU6ICdVTk1BUktFRF9MSVNUJyxcbiAgbmFtZTogJ3VubWFya2VkTGlzdHMnLFxufTtcbiIsImltcG9ydCBnZXRWYWx1ZSBmcm9tICcuLi91dGlsL2dldFZhbHVlJztcblxuY29uc3QgbGlzdEl0ZW1QcmVmaXhQYXR0ZXJuID0gL15cXCpcXHM/LztcbmNvbnN0IHBsYWluTGlzdEdsb2JhbFBhdHRlcm4gPSAvXFx7XFx7Zj9wP1A/bD9hP2k/bj90P1xccz9saXN0XFxzP1xcfChbXlxcfVxcfV0rKVxcfVxcfS9nO1xuY29uc3QgcGxhaW5MaXN0SXRlbVBhdHRlcm4gPSAvXFwqXFxzKihbXip9XSspL2c7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2xvYmFsUGF0dGVybjogcGxhaW5MaXN0R2xvYmFsUGF0dGVybixcbiAgcGFyc2VQYXR0ZXJuOiBwbGFpbkxpc3RJdGVtUGF0dGVybixcbiAgcGFyc2U6IChsaXN0SXRlbXMpID0+IHtcbiAgICBpZiAoIWxpc3RJdGVtcykge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgbGlzdEl0ZW1zXG4gICAgICAgIC5tYXAoKGl0ZW0pID0+IGl0ZW0ucmVwbGFjZShsaXN0SXRlbVByZWZpeFBhdHRlcm4sICcnKS50cmltKCkpXG4gICAgICAgIC8vIC5tYXAoZ2V0VmFsdWUpXG4gICAgICAgIC5maWx0ZXIoKHZhbHVlKSA9PiB2YWx1ZSAmJiB2YWx1ZS5sZW5ndGgpXG4gICAgKTtcbiAgfSxcbiAgdmFyaWFibGU6ICdQTEFJTl9MSVNUJyxcbiAgbmFtZTogJ3BsYWluTGlzdHMnLFxufTtcbiIsImNvbnN0IG1hcnJpYWdlR2xvYmFsUGF0dGVybiA9IC9cXHtcXHtNYXJyaWFnZVxcfChbXlxcfVxcfV0rKVxcfVxcfS9naTtcbmNvbnN0IG1hcnJpYWdlUGF0dGVybiA9IC9NYXJyaWFnZVxcfChbXnxdKylcXHwoLiopXFx9XFx9L2k7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2xvYmFsUGF0dGVybjogbWFycmlhZ2VHbG9iYWxQYXR0ZXJuLFxuICBwYXJzZVBhdHRlcm46IG1hcnJpYWdlUGF0dGVybixcbiAgcGFyc2U6IHJlc3VsdHMgPT4ge1xuICAgIGNvbnN0IFssIHdobywgbWFycmllZF0gPSByZXN1bHRzO1xuICAgIHJldHVybiB7XG4gICAgICB3aG8sXG4gICAgICBtYXJyaWVkLFxuICAgIH07XG4gIH0sXG4gIHZhcmlhYmxlOiAnTUFSUklBR0UnLFxuICBuYW1lOiAnbWFycmlhZ2VzJyxcbn07XG4iLCJjb25zdCBuYmF5R2xvYmFsUGF0dGVybiA9IC9cXHtcXHtuYmF5XFx8KFteXFx9XFx9XSspXFx9XFx9L2dpO1xuY29uc3QgbmJheVBhdHRlcm4gPSAvbmJheVxcfChbXnxdKylcXHwoLiopXFx9XFx9L2k7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2xvYmFsUGF0dGVybjogbmJheUdsb2JhbFBhdHRlcm4sXG4gIHBhcnNlUGF0dGVybjogbmJheVBhdHRlcm4sXG4gIHBhcnNlOiByZXN1bHRzID0+IHtcbiAgICBjb25zdCBbLCB5ZWFyLCB0eXBlXSA9IHJlc3VsdHM7XG4gICAgcmV0dXJuIHllYXI7XG4gIH0sXG4gIHZhcmlhYmxlOiAnbmJheScsXG4gIG5hbWU6ICduYmF5Jyxcbn07XG4iLCJjb25zdCBvdGhlckdsb2JhbFBhdHRlcm4gPSAvXFx7XFx7KFtefFxcbl0rKVxcfChbXnxcXG5dKylcXHw/KFteXFx9XFxuXSspP1xcfVxcfS9nO1xuY29uc3Qgb3RoZXJQYXR0ZXJuID0gL1xce1xceyhbXnxcXG5dKylcXHwoW158XFxuXSspXFx8PyhbXlxcfVxcbl0rKT9cXH1cXH0vO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdsb2JhbFBhdHRlcm46IG90aGVyR2xvYmFsUGF0dGVybixcbiAgcGFyc2VQYXR0ZXJuOiBvdGhlclBhdHRlcm4sXG4gIHBhcnNlOiByZXN1bHRzID0+IHtcbiAgICBjb25zdCBbLCBsYWJlbCwgZGVzY3JpcHRvciwgZXh0cmFdID0gcmVzdWx0cztcbiAgICByZXR1cm4gbGFiZWw7XG4gIH0sXG4gIHZhcmlhYmxlOiAnT1RIRVInLFxuICBuYW1lOiAnb3RoZXJzJyxcbn07XG4iLCJjb25zdCBobGlzdEdsb2JhbFBhdHRlcm4gPSAvXFx7XFx7aGxpc3RcXHwoW15cXH1cXH1dKylcXH1cXH0vZ2k7XG5jb25zdCBobGlzdFBhdHRlcm4gPSAvaGxpc3RcXHwoLiopXFx9XFx9L2k7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2xvYmFsUGF0dGVybjogaGxpc3RHbG9iYWxQYXR0ZXJuLFxuICBwYXJzZVBhdHRlcm46IGhsaXN0UGF0dGVybixcbiAgcGFyc2U6IHJlc3VsdHMgPT4ge1xuICAgIGxldCBbLCBlbGVtZW50c10gPSByZXN1bHRzO1xuICAgIHJldHVybiBlbGVtZW50cy5zcGxpdCgnfCcpXG4gIH0sXG4gIHZhcmlhYmxlOiAnSExJU1QnLFxuICBuYW1lOiAnaGxpc3RzJyxcbn07XG4iLCJjb25zdCBiaXJ0aERhdGVHbG9iYWxQYXR0ZXJuID0gL1xce1xce2JpcnRoXFxzZGF0ZShbXlxcfVxcfV0rKVxcfVxcfS9pZztcbmNvbnN0IGJpcnRoRGF0ZVBhdHRlcm4gPSAvKFxcZCspXFx8KFxcZCspXFx8KFxcZCspLztcblxuY29uc3QgbWlsbGlzSW5ZZWFyID0gMTAwMCAqIDYwICogNjAgKiAyNCAqIDM2NTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBnbG9iYWxQYXR0ZXJuOiBiaXJ0aERhdGVHbG9iYWxQYXR0ZXJuLFxuICBwYXJzZVBhdHRlcm46IGJpcnRoRGF0ZVBhdHRlcm4sXG4gIHBhcnNlOiByZXN1bHRzID0+IHtcbiAgICBjb25zdCBbLCB5ZWFyLCBtb250aCwgZGF5XSA9IHJlc3VsdHM7XG4gICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKHllYXIsIG1vbnRoLTEsIGRheSk7XG4gICAgY29uc3QgYWdlID0gTWF0aC5mbG9vcigoRGF0ZS5ub3coKSAtICtkYXRlKSAvIG1pbGxpc0luWWVhcik7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRhdGUsXG4gICAgICBhZ2UsXG4gICAgfTtcbiAgfSxcbiAgdmFyaWFibGU6ICdCSVJUSF9EQVRFJyxcbiAgbmFtZTogJ2JpcnRoRGF0ZXMnLFxufTtcbiIsImltcG9ydCB7IERPX05PVF9SRVBMQUNFIH0gZnJvbSAnLi9kYXRhVHlwZSdcbmNvbnN0IGxhYmVsZWREYXRlR2xvYmFsUGF0dGVybiA9IC9cXHtcXHsoW15cXG5cXH1cXH1dKylcXH1cXH0vZztcbmNvbnN0IGxhYmVsZWREYXRlUGF0dGVybiA9IC8oLiopLztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBnbG9iYWxQYXR0ZXJuOiBsYWJlbGVkRGF0ZUdsb2JhbFBhdHRlcm4sXG4gIHBhcnNlUGF0dGVybjogbGFiZWxlZERhdGVQYXR0ZXJuLFxuICBwYXJzZTogcmVzdWx0cyA9PiB7XG4gICAgY29uc3QgZmlyc3RQaXBlSW5kZXggPSByZXN1bHRzWzBdLmluZGV4T2YoJ3wnKTtcbiAgICBpZiAoZmlyc3RQaXBlSW5kZXggPiAtMSkge1xuICAgICAgY29uc3Qgc3RyID0gcmVzdWx0c1swXVxuICAgICAgICAuc3Vic3RyaW5nKGZpcnN0UGlwZUluZGV4ICsgMSlcbiAgICAgICAgLnNsaWNlKDAsIC0yKVxuICAgICAgbGV0IHBvdGVudGlhbERhdGUgPSBuZXcgRGF0ZShzdHIgKyAnIEdNVCcpO1xuICAgICAgaWYgKCFpc05hTihwb3RlbnRpYWxEYXRlLmdldFRpbWUoKSkpIHtcbiAgICAgICAgcmV0dXJuIHsgZGF0ZTogcG90ZW50aWFsRGF0ZSB9O1xuICAgICAgfVxuICAgICAgcG90ZW50aWFsRGF0ZSA9IG5ldyBEYXRlKHN0ci5zcGxpdCgnfCcpLmpvaW4oJy0nKSArICcgR01UJylcbiAgICAgIGlmICghaXNOYU4ocG90ZW50aWFsRGF0ZS5nZXRUaW1lKCkpKSB7XG4gICAgICAgIHJldHVybiB7IGRhdGU6IHBvdGVudGlhbERhdGUgfTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIERPX05PVF9SRVBMQUNFO1xuICB9LFxuICB2YXJpYWJsZTogJ0xBQkVMRURfREFURScsXG4gIG5hbWU6ICdsYWJlbGVkRGF0ZXMnLFxufTtcbiIsImNvbnN0IGRlYXRoRGF0ZUdsb2JhbFBhdHRlcm4gPSAvXFx7XFx7ZGVhdGhcXHNkYXRlXFxzYW5kXFxzYWdlKFteXFx9XFx9XSspXFx9XFx9L2lnO1xuY29uc3QgZGVhdGhEYXRlUGF0dGVybiA9IC8oXFxkKylcXHwoXFxkKylcXHwoXFxkKylcXHwoXFxkKylcXHw/KFxcZCspP1xcfD8oXFxkKyk/LztcblxuY29uc3QgbWlsbGlzSW5ZZWFyID0gMTAwMCAqIDYwICogNjAgKiAyNCAqIDM2NTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBnbG9iYWxQYXR0ZXJuOiBkZWF0aERhdGVHbG9iYWxQYXR0ZXJuLFxuICBwYXJzZVBhdHRlcm46IGRlYXRoRGF0ZVBhdHRlcm4sXG4gIHBhcnNlOiByZXN1bHRzID0+IHtcbiAgICAvLyBTb21lIGFydGljbGVzIGRvIG5vdCBsaXN0IGJpcnRoIG1vbnRoL2RheSBzbyB3ZSBqdXN0IGVzdGltYXRlIHRoZSBiaXJ0aCBkYXRlXG4gICAgY29uc3QgWywgZGVhdGhZZWFyLCBkZWF0aE1vbnRoLCBkZWF0aERheSwgYmlydGhZZWFyLCBiaXJ0aE1vbnRoID0gMCwgYmlydGhEYXkgPSAwXSA9IHJlc3VsdHM7XG4gICAgY29uc3QgZGVhdGhEYXRlID0gbmV3IERhdGUoZGVhdGhZZWFyLCBkZWF0aE1vbnRoLTEsIGRlYXRoRGF5KTtcbiAgICBjb25zdCBiaXJ0aERhdGUgPSBuZXcgRGF0ZShiaXJ0aFllYXIsIGJpcnRoTW9udGgtMSwgYmlydGhEYXkpO1xuICAgIGNvbnN0IGFnZSA9IE1hdGguZmxvb3IoKE51bWJlcihkZWF0aERhdGUpIC0gTnVtYmVyKGJpcnRoRGF0ZSkpIC8gbWlsbGlzSW5ZZWFyKTtcbiAgICByZXR1cm4ge1xuICAgICAgZGF0ZTogZGVhdGhEYXRlLFxuICAgICAgYWdlLFxuICAgIH07XG4gIH0sXG4gIHZhcmlhYmxlOiAnREVBVEhfREFURScsXG4gIG5hbWU6ICdkZWF0aERhdGVzJyxcbn07XG4iLCJjb25zdCBVUkxHbG9iYWxQYXR0ZXJuID0gL1xce1xce1VSTFxcfChbXlxcfVxcfV0rKVxcfVxcfS9nO1xuY29uc3QgVVJMUGF0dGVybiA9IC9VUkxcXHwoW15cXH1cXH1dKylcXH1cXH0vO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdsb2JhbFBhdHRlcm46IFVSTEdsb2JhbFBhdHRlcm4sXG4gIHBhcnNlUGF0dGVybjogVVJMUGF0dGVybixcbiAgcGFyc2U6IHJlc3VsdHMgPT4ge1xuICAgIGNvbnN0IFssIHZhbHVlXSA9IHJlc3VsdHM7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9LFxuICB2YXJpYWJsZTogJ1VSTCcsXG4gIG5hbWU6ICd1cmxzJyxcbn07XG4iLCJjb25zdCB3ZWJzaXRlR2xvYmFsUGF0dGVybiA9IC9cXFsoaHR0cHM/KTpcXC9cXC8oKD86d3d3XFwuKT9bLWEtekEtWjAtOUA6JS5fXFwrfiM9XXsyLDI1Nn1cXC5bYS16XXsyLDZ9KVxcYihbLWEtekEtWjAtOUA6JV9cXCsufiM/Ji8vPV0qKVxccysoW1xcd1xcc10rKVxcXS9nO1xuY29uc3Qgd2Vic2l0ZVBhdHRlcm4gPSAvXFxbKGh0dHBzPyk6XFwvXFwvKCg/Ond3d1xcLik/Wy1hLXpBLVowLTlAOiUuX1xcK34jPV17MiwyNTZ9XFwuW2Etel17Miw2fSlcXGIoWy1hLXpBLVowLTlAOiVfXFwrLn4jPyYvLz1dKilcXHMrKFtcXHdcXHNdKylcXF0vO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdsb2JhbFBhdHRlcm46IHdlYnNpdGVHbG9iYWxQYXR0ZXJuLFxuICBwYXJzZVBhdHRlcm46IHdlYnNpdGVQYXR0ZXJuLFxuICBwYXJzZTogcmVzdWx0cyA9PiB7XG4gICAgY29uc3QgWywgcHJvdG9jb2wsIGhvc3RuYW1lLCBwYXRoLCB0aXRsZV0gPSByZXN1bHRzO1xuICAgIHJldHVybiB7XG4gICAgICBwcm90b2NvbCxcbiAgICAgIGhvc3RuYW1lLFxuICAgICAgcGF0aCxcbiAgICAgIHRpdGxlLFxuICAgICAgdXJsOiBgJHtwcm90b2NvbH06Ly8ke2hvc3RuYW1lfSR7cGF0aH1gXG4gICAgfTtcbiAgfSxcbiAgdmFyaWFibGU6ICdXRUJTSVRFJyxcbiAgbmFtZTogJ3dlYnNpdGVzJyxcbn07XG4iLCJjb25zdCBjb252ZXJ0R2xvYmFsUGF0dGVybiA9IC9cXHtcXHtjb252ZXJ0XFx8KFtcXGRcXC5dKylcXHwoXFx3KykvZztcbmNvbnN0IGNvbnZlcnRQYXR0ZXJuID0gL1xce1xce2NvbnZlcnRcXHwoW1xcZFxcLl0rKVxcfChcXHcrKS87XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2xvYmFsUGF0dGVybjogY29udmVydEdsb2JhbFBhdHRlcm4sXG4gIHBhcnNlUGF0dGVybjogY29udmVydFBhdHRlcm4sXG4gIHBhcnNlOiByZXN1bHRzID0+IHtcbiAgICBjb25zdCBbLCBudW0sIHVuaXRdID0gcmVzdWx0cztcbiAgICByZXR1cm4gYCR7bnVtfSAke3VuaXR9YDtcbiAgfSxcbiAgdmFyaWFibGU6ICdDT05WRVJUJyxcbiAgbmFtZTogJ2NvbnZlcnRzJyxcbn07XG4iLCJjb25zdCBmaWxtRGF0ZXNQYXR0ZXJuID0gL1xce1xce2ZpbG1cXHNkYXRlKFteXFx9XFx9XSspXFx9XFx9L2dpO1xuY29uc3QgZmlsbURhdGVQYXR0ZXJuR2xvYmFsID0gLyhcXGQrKVxcfD8oXFxkKylcXHw/KFxcZCspXFx8PyhbXlxcfFxcfV0qKVxcfD8ocmVmXFxkKz0oW15cXHxcXH1dKikpPy9nO1xuY29uc3QgZmlsbURhdGVQYXR0ZXJuID0gLyhcXGQrKVxcfD8oXFxkKylcXHw/KFxcZCspXFx8PyhbXlxcfFxcfV0qKVxcfD8ocmVmXFxkKz0oW15cXHxcXH1dKikpPy87XG5cbi8vIEZvcm1hdCBkb2N1bWVudGVkIGhlcmU6XG4vLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9UZW1wbGF0ZTpGaWxtX2RhdGUvZG9jXG4vLyBUYXJnZXQ6XG4vLyBZZWFyIHJlcXVpcmVkLCBtb250aCBkYXkgZXRjLiBvcHRpb25hbC4uLlxuLy8ge3tGaWxtIGRhdGV8eWVhcjF8bW9udGgxfGRheTF8bG9jYXRpb24xfHJlZjE9PHJlZiBuYW1lPVwieHh4eHhcIiAvPnx5ZWFyMnxtb250aDJ8ZGF5Mnxsb2NhdGlvbjJ8cmVmMj08cmVmIG5hbWU9XCJ5eXl5XCIgLz59fVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdsb2JhbFBhdHRlcm46IGZpbG1EYXRlc1BhdHRlcm4sXG4gIHBhcnNlUGF0dGVybjogZmlsbURhdGVQYXR0ZXJuR2xvYmFsLFxuICBwYXJzZTogKHJlc3VsdHMpID0+IHtcbiAgICByZXR1cm4gcmVzdWx0cy5tYXAoKHJlc3VsdCkgPT4ge1xuICAgICAgY29uc3QgW18sIHllYXIsIG1vbnRoLCBkYXksIGxvY2F0aW9uLCBfcmVmLCByZWZdID0gcmVzdWx0Lm1hdGNoKFxuICAgICAgICBmaWxtRGF0ZVBhdHRlcm5cbiAgICAgICk7XG4gICAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoeWVhciwgbW9udGggJiYgbW9udGggLSAxLCBkYXkpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGF0ZSxcbiAgICAgICAgbG9jYXRpb24sXG4gICAgICAgIHJlZixcbiAgICAgIH07XG4gICAgfSk7XG4gIH0sXG4gIHZhcmlhYmxlOiAnRklMTV9EQVRFUycsXG4gIG5hbWU6ICdmaWxtRGF0ZXMnLFxufTtcbiIsImNvbnN0IG90aGVyR2xvYmFsUGF0dGVybiA9IC88cmVmKFxcc1xcdys9W14+XSspPz4oLiopPFxcL3JlZj4vZztcbmNvbnN0IG90aGVyUGF0dGVybiA9IC88cmVmKFxcc1xcdys9W14+XSspPz4oLiopPFxcL3JlZj4vO1xuXG5jb25zdCBhdHRyaWJ1dGVHbG9iYWxQYXR0ZXJuID0gLyhcXHcrKT0oW1wiXFx3XSspL2c7XG5jb25zdCBhdHRyaWJ1dGVQYXR0ZXJuID0gLyhcXHcrKT0oW1wiXFx3XSspLztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBnbG9iYWxQYXR0ZXJuOiBvdGhlckdsb2JhbFBhdHRlcm4sXG4gIHBhcnNlUGF0dGVybjogb3RoZXJQYXR0ZXJuLFxuICBwYXJzZTogKHJlc3VsdHMpID0+IHtcbiAgICBjb25zdCBbXywgYXR0cmlidXRlc1NvdXJjZSwgY29udGVudHNdID0gcmVzdWx0cztcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0gKFxuICAgICAgKGF0dHJpYnV0ZXNTb3VyY2UgfHwgJycpLm1hdGNoKGF0dHJpYnV0ZUdsb2JhbFBhdHRlcm4pIHx8IFtdXG4gICAgKS5yZWR1Y2UoKG1lbW8sIGF0dHIpID0+IHtcbiAgICAgIGlmIChhdHRyKSB7XG4gICAgICAgIGNvbnN0IFtfLCBrZXksIHZhbHVlXSA9IGF0dHIubWF0Y2goYXR0cmlidXRlUGF0dGVybik7XG4gICAgICAgIG1lbW9ba2V5XSA9IHZhbHVlLnJlcGxhY2UoL1wiL2csICcnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtZW1vO1xuICAgIH0sIHt9KTtcbiAgICByZXR1cm4geyBhdHRyaWJ1dGVzLCBjb250ZW50cyB9O1xuICB9LFxuICB2YXJpYWJsZTogJ1JFRicsXG4gIG5hbWU6ICdyZWZzJyxcbn07XG4iLCJjb25zdCBvdGhlckdsb2JhbFBhdHRlcm4gPSAvPHJlZihcXHNcXHcrPVtePl0rKT9cXC8+L2c7XG5jb25zdCBvdGhlclBhdHRlcm4gPSAvPHJlZihcXHNcXHcrPVtePl0rKT9cXC8+LztcblxuY29uc3QgYXR0cmlidXRlR2xvYmFsUGF0dGVybiA9IC8oXFx3Kyk9KFtcIlxcd10rKS9nO1xuY29uc3QgYXR0cmlidXRlUGF0dGVybiA9IC8oXFx3Kyk9KFtcIlxcd10rKS87XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2xvYmFsUGF0dGVybjogb3RoZXJHbG9iYWxQYXR0ZXJuLFxuICBwYXJzZVBhdHRlcm46IG90aGVyUGF0dGVybixcbiAgcGFyc2U6IChyZXN1bHRzKSA9PiB7XG4gICAgY29uc3QgYXR0cmlidXRlcyA9IHJlc3VsdHNbMV1cbiAgICAgIC5tYXRjaChhdHRyaWJ1dGVHbG9iYWxQYXR0ZXJuKVxuICAgICAgLnJlZHVjZSgobWVtbywgYXR0cikgPT4ge1xuICAgICAgICBjb25zdCBbXywga2V5LCB2YWx1ZV0gPSBhdHRyLm1hdGNoKGF0dHJpYnV0ZVBhdHRlcm4pO1xuICAgICAgICBtZW1vW2tleV0gPSB2YWx1ZS5yZXBsYWNlKC9cIi9nLCAnJyk7XG4gICAgICAgIHJldHVybiBtZW1vO1xuICAgICAgfSwge30pO1xuICAgIHJldHVybiB7IGF0dHJpYnV0ZXMgfTtcbiAgfSxcbiAgdmFyaWFibGU6ICdSRUYnLFxuICBuYW1lOiAncmVmcycsXG59O1xuIiwiY29uc3QgZ2xvYmFsUGF0dGVybiA9IC9cXHtcXHtmb3JtYXRudW06XFxkK1xcfVxcfS9naTtcbmNvbnN0IHBhcnNlUGF0dGVybiA9IC9cXHtcXHtmb3JtYXRudW06KFxcZCspXFx9XFx9LztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBnbG9iYWxQYXR0ZXJuLFxuICBwYXJzZVBhdHRlcm4sXG4gIHBhcnNlOiAocmVzdWx0cykgPT4ge1xuICAgIGNvbnN0IFssIHZhbHVlXSA9IHJlc3VsdHM7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQodmFsdWUpO1xuICB9LFxuICB2YXJpYWJsZTogJ0ZPUk1BVF9OVU0nLFxuICBuYW1lOiAnZm9ybWF0TnVtJyxcbn07XG4iLCJpbXBvcnQgc21hbGwgZnJvbSAnLi9zbWFsbCc7XG5pbXBvcnQgZmxhZyBmcm9tICcuL2ZsYWcnO1xuaW1wb3J0IGNvb3JkcyBmcm9tICcuL2Nvb3Jkcyc7XG5pbXBvcnQgaW5zdGFuY2VzIGZyb20gJy4vaW5zdGFuY2VzJztcbmltcG9ydCB1bmJ1bGxldGVkTGlzdHMgZnJvbSAnLi91bmJ1bGxldGVkTGlzdHMnO1xuaW1wb3J0IHVubWFya2VkTGlzdHMgZnJvbSAnLi91bm1hcmtlZExpc3RzJztcbmltcG9ydCBwbGFpbkxpc3RzIGZyb20gJy4vcGxhaW5MaXN0cyc7XG5pbXBvcnQgbWFycmlhZ2VzIGZyb20gJy4vbWFycmlhZ2VzJztcbmltcG9ydCBuYmF5IGZyb20gJy4vbmJheSc7XG5pbXBvcnQgb3RoZXIgZnJvbSAnLi9vdGhlcic7XG5pbXBvcnQgaGxpc3QgZnJvbSAnLi9obGlzdCc7XG5pbXBvcnQgYmlydGhEYXRlcyBmcm9tICcuL2JpcnRoRGF0ZXMnO1xuaW1wb3J0IGxhYmVsZWREYXRlcyBmcm9tICcuL2xhYmVsZWREYXRlcyc7XG5pbXBvcnQgZGVhdGhEYXRlcyBmcm9tICcuL2RlYXRoRGF0ZXMnO1xuaW1wb3J0IHVybCBmcm9tICcuL3VybCc7XG5pbXBvcnQgd2Vic2l0ZSBmcm9tICcuL3dlYnNpdGUnO1xuaW1wb3J0IGNvbnZlcnQgZnJvbSAnLi9jb252ZXJ0JztcbmltcG9ydCBjcmVhdGVEYXRhVHlwZUhhbmRsZXIgZnJvbSAnLi9kYXRhVHlwZSc7XG5pbXBvcnQgZmlsbURhdGVzIGZyb20gJy4vZmlsbURhdGVzJztcbmltcG9ydCByZWYxIGZyb20gJy4vcmVmMSc7XG5pbXBvcnQgcmVmMiBmcm9tICcuL3JlZjInO1xuaW1wb3J0IGZvcm1hdE51bSBmcm9tICcuL2Zvcm1hdE51bSc7XG5cbmNvbnN0IGRhdGFUeXBlcyA9IFtcbiAgLy8gT3JkZXIgaXMgdmVyeSBpbXBvcnRhbnQgaGVyZS4uLlxuICBpbnN0YW5jZXMsXG4gIHJlZjEsXG4gIHJlZjIsXG4gIHNtYWxsLFxuICBmb3JtYXROdW0sXG4gIGZsYWcsXG4gIGNvb3JkcyxcbiAgbWFycmlhZ2VzLFxuICBiaXJ0aERhdGVzLFxuICBsYWJlbGVkRGF0ZXMsXG4gIGRlYXRoRGF0ZXMsXG4gIHVuYnVsbGV0ZWRMaXN0cyxcbiAgd2Vic2l0ZSxcbiAgaGxpc3QsXG4gIHVybCxcbiAgY29udmVydCxcbiAgbmJheSxcbiAgZmlsbURhdGVzLFxuICAvLyBvdGhlciBuZWVkcyB0byBhbHdheXMgYmUgYWZ0ZXIgc3BlY2lmaWMgZGF0YSBkeXBlc1xuICBvdGhlcixcbiAgLy8gTGlzdHMgc2hvdWxkIGJlIGxhc3RcbiAgcGxhaW5MaXN0cyxcbiAgdW5tYXJrZWRMaXN0cyxcbl07XG5cbmV4cG9ydCBkZWZhdWx0IGRhdGFUeXBlcy5tYXAoKHR5cGUpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBoYW5kbGVyOiBjcmVhdGVEYXRhVHlwZUhhbmRsZXIodHlwZSksXG4gICAgbmFtZTogdHlwZS5uYW1lLFxuICAgIHBhdHRlcm46IG5ldyBSZWdFeHAoYFxcXFwkJHt0eXBlLnZhcmlhYmxlfV8oXFxcXGQrKWApLFxuICB9O1xufSk7XG4iLCJcbi8qKlxuICogR2l2ZW4gYSBzdHJpbmcgbWVhbnQgdG8gY29udGFpbiBhIG51bWJlciwgdHJpZXMgdG8gZmluZCBvdXRcbiAqIHRoZSBudW1iZXIgY29uc2lkZXJpbmcgY29tbWEgb3IgcG9pbnQgc2VwYXJhdG9yc1xuICogQHBhcmFtICB7U3RyaW5nfSBudW1iZXJcbiAqIEByZXR1cm4ge051bWJlcn0gd2l0aCB0aGUgcGFyc2VkIG51bWJlciwgZmFsc2UsIGlmIHRoZSBwYXJzaW5nIGlzXG4gKiAgICAgICAgICAgICAgICAgIG5vdCBwb3NzaWJsZVxuICovXG5leHBvcnQgZGVmYXVsdCAobnVtYmVyKSA9PiB7XG5cbiAgaWYgKHR5cGVvZiBudW1iZXIgIT09ICdzdHJpbmcnKSByZXR1cm4gZmFsc2VcblxuICBudW1iZXIgPSBudW1iZXIudHJpbSgpLnJlcGxhY2UoLyAvZywgJycpXG5cbiAgLy8gRmluZCBvdXQgaWYgY29tbWFzIGFyZSB1c2VkIGFzIHRob3VzYW5kIG9yIGRlY2ltYWwgc2VwYXJhdG9ycy5cbiAgLy8gSWYgdGhlIHN0cmluZyBoYXMgYm90aCwgYW5kIGNvbW1hcyBhcmUgZmlyc3QsIHRoZW4gY29tbWFzIGFyZVxuICAvLyB0aG91c2FuZCBzZXBhcmF0b3JzIChlbmdsaXNoIHN0eWxlKVxuICBpZiAobnVtYmVyLm1hdGNoKC8sLykgJiYgbnVtYmVyLm1hdGNoKC9cXC4vKSkge1xuICAgIGlmIChudW1iZXIuaW5kZXhPZignLCcpIDwgbnVtYmVyLmluZGV4T2YoJy4nKSkge1xuICAgICAgcmV0dXJuIHBhcnNlRW5nbGlzaChudW1iZXIpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwYXJzZVNwYW5pc2gobnVtYmVyKVxuICAgIH1cbiAgfVxuXG4gIGlmIChudW1iZXIubWF0Y2goLywvKSAmJiAhbnVtYmVyLm1hdGNoKC9cXC4vKSkge1xuICAgIGlmIChudW1iZXIubWF0Y2goLywvZykubGVuZ3RoID4gMSkge1xuXG4gICAgICAvLyBJZiB0aGVyZSBpcyBtb3JlIHRoYW4gb25lLCB0aGVuIGl0J3MgYSB0aG91c2FuZCBzZXBhcmF0b3JcbiAgICAgIHJldHVybiBwYXJzZUVuZ2xpc2gobnVtYmVyKVxuICAgIH0gZWxzZSB7XG5cbiAgICAgIC8vIElmIGl0J3MgZm9sbHdlZCBieSAzIGRpZ2l0cywgaXQncyBwcm9hYmx5IGEgdGhvdXNhbmQgc2VwYXJhdG9yXG4gICAgICBpZiAobnVtYmVyLm1hdGNoKC8sWzAtOV17M30oJHxeWzAtOV0pLykpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlRW5nbGlzaChudW1iZXIpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcGFyc2VTcGFuaXNoKG51bWJlcilcbiAgICAgIH1cblxuICAgIH1cbiAgfVxuXG4gIGlmICghbnVtYmVyLm1hdGNoKC8sLykgJiYgbnVtYmVyLm1hdGNoKC9cXC4vKSkge1xuICAgIGlmIChudW1iZXIubWF0Y2goL1xcLi9nKS5sZW5ndGggPiAxKSB7XG5cbiAgICAgIC8vIElmIHRoZXJlIGlzIG1vcmUgdGhhbiBvbmUsIHRoZW4gaXQncyBhIHRob3VzYW5kIHNlcGFyYXRvclxuICAgICAgcmV0dXJuIHBhcnNlU3BhbmlzaChudW1iZXIpXG4gICAgfSBlbHNlIHtcblxuICAgICAgLy8gSWYgaXQncyBmb2xsd2VkIGJ5IDMgZGlnaXRzLCBpdCdzIHByb2FibHkgYSB0aG91c2FuZCBzZXBhcmF0b3JcbiAgICAgIGlmIChudW1iZXIubWF0Y2goL1xcLlswLTldezN9KCR8XlswLTldKS8pKSB7XG4gICAgICAgIHJldHVybiBwYXJzZVNwYW5pc2gobnVtYmVyKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlRW5nbGlzaChudW1iZXIpXG4gICAgICB9XG5cbiAgICB9XG4gIH1cblxuICAvLyBJZiBpdCBsb29rcyB0aGUgc2FtZSBhcyBudW1iZXIgb3Igc3RyaW5nLCBqdXN0IGNhc3QgaXRcbiAgaWYgKCgrbnVtYmVyKS50b1N0cmluZygpID09PSBudW1iZXIpIHJldHVybiArbnVtYmVyXG5cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmNvbnN0IHBhcnNlRW5nbGlzaCA9IChzdHIpID0+IHtcbiAgcmV0dXJuICtzdHIucmVwbGFjZSgvLC9nLCAnJylcbn1cblxuY29uc3QgcGFyc2VTcGFuaXNoID0gKHN0cikgPT4ge1xuICByZXR1cm4gK3N0ci5yZXBsYWNlKC9cXC4vZywgJycpLnJlcGxhY2UoLywvZywgJy4nKVxufVxuXG4iXSwibmFtZXMiOlsidHJpbVdyYXBwZXJzIiwic3RyIiwicmVwbGFjZSIsInRyaW0iLCJ0cmltT3IiLCJvclBvc2l0aW9uIiwiaW5kZXhPZiIsInN1YnN0cmluZyIsImdldFZhbHVlIiwicmF3Iiwia2V5IiwiY2xlYW5zZWQiLCJleHRyYVByb3BlcnR5UGF0dGVybiIsImVuZGluZ1BhdHRlcm4iLCJsaW5rcyIsIm1hdGNoIiwibGlua3NQYXR0ZXJuIiwic3BsaXQiLCJsaW5rU2VwYXJhdG9yUGF0dGVybiIsImZpbHRlciIsInRleHQiLCJkYXRhVHlwZSIsImdsb2JhbFBhdHRlcm4iLCJwYXJzZVBhdHRlcm4iLCJwYXJzZSIsInZhcmlhYmxlIiwibmFtZSIsIm1hdGNoZXMiLCJzb3VyY2UiLCJpbnN0YW5jZXMiLCJtYXAiLCJzb3VyY2VBZnRlciIsInJlZHVjZSIsIm1lbW8iLCJpbmRleCIsIkRPX05PVF9SRVBMQUNFIiwiYnlEYXRhSGFuZGxlciIsImhhbmRsZXIiLCJjb250ZXh0IiwiZGF0YSIsIk9iamVjdCIsImFzc2lnbiIsImV4dHJhY3REYXRhIiwiZGF0YVR5cGVzIiwidHlwZSIsImZpbmRQcm9wZXJ0eUxpc3QiLCJrZXlWYWx1ZVBhaXJzIiwia2V5VmFsdWVHbG9iYWxQYXR0ZXJuIiwicmVzdWx0Iiwia2V5VmFsdWVQYXR0ZXJuIiwiZXhlYyIsInJhd0tleSIsInJhd1ZhbHVlIiwiY2FtZWxDYXNlIiwiaXRlbSIsImZpbGxWYXJpYWJsZSIsInZhbHVlIiwic2ltcGxpZnlEYXRhVmFsdWVzIiwibG9nIiwiSlNPTiIsInN0cmluZ2lmeSIsImZpbmQiLCJwYXR0ZXJuIiwibWF0Y2hlZCIsImRhdGFWYWx1ZSIsInBhcnNlSW50IiwiZmlsbFZhcmlhYmxlcyIsIm9wdGlvbnMiLCJ1bmRlZmluZWQiLCJEYXRlIiwiQXJyYXkiLCJpc0FycmF5Iiwia2V5cyIsImZpbGxlZCIsImhhbmRsZVNtYWxsRGF0YSIsInNtYWxsRGF0YVR5cGUiLCJwcmltYXJ5Iiwic2Vjb25kYXJ5IiwiZ2V0VmFyaWFibGVWYWx1ZSIsInNtYWxsRGF0YSIsInJlZHVjZVZhcmlhYmxlIiwiZmxvYXQiLCJudW1iZXJQYXJzZSIsInBhcnNlRmxvYXQiLCJpc05hTiIsImRhdGVWYWx1ZSIsInZhcmlhYmxlVmFsdWUiLCJieVZhcmlhYmxlUmVkdWN0aW9uIiwicmVkdWNlZCIsImV4dHJhY3RQcm9wZXJ0aWVzIiwidHJhbnNmb3JtUHJvcGVydGllcyIsInByb3BlcnRpZXMiLCJ0cmFuc2Zvcm1lZCIsImJsYW5rTmFtZVBhdHRlcm4iLCJpZCIsImJsYW5rTmFtZSIsImJsYW5rSW5mbyIsImJsYW5rSW5mb1BhdHRlcm4iLCJmaW5kT3V0ZXJJbmRleCIsImxhc3RPcGVuIiwiaSIsImxlbmd0aCIsIm5leHRUd28iLCJzdWJzdHIiLCJwb3AiLCJwdXNoIiwic3RhcnRNYXRjaCIsImluZm9Cb3hTdGFydFBhdHRlcm4iLCJzb3VyY2VMZWZ0Iiwic3RhcnRJbmRleCIsIndpdGhTdGFydCIsIm91dGVySW5kZXgiLCJleHRyYWN0SW5mb2JveGVzIiwicGFyc2VkIiwiaW5mb2JveGVzIiwiY2xlYW5Tb3VyY2UiLCJyZW1vdmVTbWFsbCIsInJlbW92ZVJlZmVyZW5jZXMiLCJ0cmFuc2Zvcm1Sb3dTcGFuIiwicm93cyIsInRyYW5zZm9ybUNlbGxzIiwibWVyZ2VkIiwiY2VsbHMiLCJrIiwibyIsImpvaW4iLCJjbGVhbiIsImxpbmtQYXR0ZXJuIiwibSIsIngiLCJwYXJzZVJvdyIsImNvdW50TWF0Y2giLCJjb3VudCIsImljb25zIiwiZ2V0TWF0Y2hlcyIsInBhcnNlVGFibGVEYXRhIiwicm93UGF0dGVybiIsImVsIiwicm93UGF0dGVyblNpbmdsZSIsInNsaWNlIiwiZ2V0VGFibGVzIiwidGFibGVTdGFydHMiLCJ0YWJsZVN0YXJ0UGF0dGVybiIsInRhYmxlRW5kcyIsInRhYmxlRW5kUGF0dGVybiIsInRhYmxlU3RhcnQiLCJ0YWJsZUVuZCIsIkVycm9yIiwiZW5kIiwic3RhcnQiLCJsYXN0IiwibGlzdCIsInBhcnNlSW5mb2JveCIsImluZm9ib3giLCJyZXMiLCJzaGlmdCIsImZvckVhY2giLCJuZXh0IiwiZ2VuZXJhbCIsInRhYmxlcyIsInBhcnNlVGFibGVzIiwiYnNUYWJsZXMiLCJwYXJzZUJzVGFibGVzIiwibGlzdHMiLCJwYXJzZUxpc3RzIiwic21hbGxHbG9iYWxQYXR0ZXJuIiwic21hbGxQYXR0ZXJuIiwicmVzdWx0cyIsImZsYWdHbG9iYWxQYXR0ZXJuIiwiZmxhZ1BhdHRlcm4iLCJjb29yZHNHbG9iYWxQYXR0ZXJuIiwiY29vcmRzUGF0dGVybiIsImxpc3RJdGVtUHJlZml4UGF0dGVybiIsInVuYnVsbGV0ZWRMaXN0R2xvYmFsUGF0dGVybiIsInVuYnVsbGV0ZWRMaXN0SXRlbVBhdHRlcm4iLCJsaXN0SXRlbXMiLCJwbGFpbkxpc3RHbG9iYWxQYXR0ZXJuIiwicGxhaW5MaXN0SXRlbVBhdHRlcm4iLCJtYXJyaWFnZUdsb2JhbFBhdHRlcm4iLCJtYXJyaWFnZVBhdHRlcm4iLCJuYmF5R2xvYmFsUGF0dGVybiIsIm5iYXlQYXR0ZXJuIiwieWVhciIsIm90aGVyR2xvYmFsUGF0dGVybiIsIm90aGVyUGF0dGVybiIsImxhYmVsIiwiaGxpc3RHbG9iYWxQYXR0ZXJuIiwiaGxpc3RQYXR0ZXJuIiwiYmlydGhEYXRlR2xvYmFsUGF0dGVybiIsImJpcnRoRGF0ZVBhdHRlcm4iLCJtaWxsaXNJblllYXIiLCJtb250aCIsImRheSIsImRhdGUiLCJNYXRoIiwiZmxvb3IiLCJub3ciLCJTeW1ib2wiLCJsYWJlbGVkRGF0ZUdsb2JhbFBhdHRlcm4iLCJsYWJlbGVkRGF0ZVBhdHRlcm4iLCJmaXJzdFBpcGVJbmRleCIsInBvdGVudGlhbERhdGUiLCJnZXRUaW1lIiwiZGVhdGhEYXRlR2xvYmFsUGF0dGVybiIsImRlYXRoRGF0ZVBhdHRlcm4iLCJkZWF0aFllYXIiLCJkZWF0aE1vbnRoIiwiZGVhdGhEYXkiLCJiaXJ0aFllYXIiLCJiaXJ0aE1vbnRoIiwiYmlydGhEYXkiLCJkZWF0aERhdGUiLCJiaXJ0aERhdGUiLCJOdW1iZXIiLCJVUkxHbG9iYWxQYXR0ZXJuIiwiVVJMUGF0dGVybiIsIndlYnNpdGVHbG9iYWxQYXR0ZXJuIiwid2Vic2l0ZVBhdHRlcm4iLCJwcm90b2NvbCIsImhvc3RuYW1lIiwicGF0aCIsImNvbnZlcnRHbG9iYWxQYXR0ZXJuIiwiY29udmVydFBhdHRlcm4iLCJmaWxtRGF0ZXNQYXR0ZXJuIiwiZmlsbURhdGVQYXR0ZXJuR2xvYmFsIiwiZmlsbURhdGVQYXR0ZXJuIiwibG9jYXRpb24iLCJyZWYiLCJhdHRyaWJ1dGVHbG9iYWxQYXR0ZXJuIiwiYXR0cmlidXRlUGF0dGVybiIsImF0dHJpYnV0ZXNTb3VyY2UiLCJjb250ZW50cyIsImF0dHJpYnV0ZXMiLCJhdHRyIiwicmVmMSIsInJlZjIiLCJzbWFsbCIsImZvcm1hdE51bSIsImZsYWciLCJjb29yZHMiLCJtYXJyaWFnZXMiLCJiaXJ0aERhdGVzIiwibGFiZWxlZERhdGVzIiwiZGVhdGhEYXRlcyIsInVuYnVsbGV0ZWRMaXN0cyIsIndlYnNpdGUiLCJobGlzdCIsInVybCIsImNvbnZlcnQiLCJuYmF5IiwiZmlsbURhdGVzIiwib3RoZXIiLCJwbGFpbkxpc3RzIiwidW5tYXJrZWRMaXN0cyIsImNyZWF0ZURhdGFUeXBlSGFuZGxlciIsIlJlZ0V4cCIsIm51bWJlciIsInBhcnNlRW5nbGlzaCIsInBhcnNlU3BhbmlzaCIsInRvU3RyaW5nIiwiaGVhZGVyc1BhdHRlcm4iLCJjZWxsU2VwYXJhdG9yUGF0dGVybiIsImxpbmtOYW1lUGF0dGVybiIsImlubGluZUhlYWRlclBhdHRlcm4iLCJhY3Rpb25QYXR0ZXJuIiwicm93U3BhbkNvdW50UGF0dGVybiIsInN0cmlwTGlua3MiLCJjYXB0dXJlIiwicmVtb3ZlQWN0aW9ucyIsInRyYW5zZm9ybUNlbGwiLCJyb3ciLCJmaW5kSW5kZXgiLCJ0IiwicCIsImZpbmRUYWJsZVN0YXJ0IiwiZmluZFRhYmxlRW5kIiwiZ2V0SGVhZGVycyIsImhlYWRlcnMiLCJnZXRSb3dzIiwiZSIsInNwYW5OIiwic3BhbkNvdW50Iiwicm93c0luU3BhbiIsImdldE5leHRUYWJsZSIsImxlZnQiLCJvYmoiLCJjYW1lbGNhc2UiLCJjbGVhbmVkU291cmNlIiwia21QYXR0ZXJuIiwiaGVhZGluZ1BhdHRlcm4iLCJzdWJoZWFkaW5nUGF0dGVybiIsImhlYWRpbmdzIiwic3ViaGVhZGluZ3MiLCJoZWFkaW5nc0JlZm9yZSIsImhlYWRpbmciLCJ0YWJsZSIsInN1YmhlYWRpbmdzQmVmb3JlIiwic3ViaGVhZGluZyJdLCJtYXBwaW5ncyI6ImlHQUtBLFFBQVNBLGNBQWFDLFNBQ2JBLEdBQ0pDLFFBQVEsUUFBUyxJQUNqQkEsUUFBUSxRQUFTLElBQ2pCQSxRQUFRLFFBQVMsSUFDakJBLFFBQVEsUUFBUyxJQUNqQkMsT0FHTCxRQUFTQyxRQUFPSCxNQUNSSSxHQUFhSixFQUFJSyxRQUFRLFlBQ1gsSUFBaEJELEVBQ0tKLEVBQUlNLFVB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
