"use strict";function _interopDefault(e){return e&&"object"==typeof e&&"default"in e?e.default:e}function trimWrappers(e){return e.replace(/\[\[/g,"").replace(/\]\]/g,"").replace(/\{\{/g,"").replace(/\}\}/g,"").trim()}function trimOr(e){var t=e.indexOf("|");return-1!==t?e.substring(0,t):e}function getValue(e,t){if(!e)return null;var r=e.trim().replace(/File:/,"").replace(/\{\{\d+\}\}/g,"").replace(extraPropertyPattern,"").replace(endingPattern,"");if("y"===r||"yes"===r)return!0;if("birthPlace"==t)return e.trim();var a=r.match(linksPattern);return a?a[0].split(linkSeparatorPattern).filter(function(e){return e}):trimOr(trimWrappers(r))}function dataType(e){var t=e.globalPattern,r=e.parsePattern,a=e.parse,n=e.variable,l=e.name;return function(e){var i=e.match(t);if(!i){var s;return s={},defineProperty(s,l,[]),defineProperty(s,"sourceAfter",e),s}var o=i.map(function(e){return a(e.match(r))}),u=i.reduce(function(e,t,r){return o[r]===DO_NOT_REPLACE?e:e.replace(t,"$"+n+"_"+r)},e);return{data:defineProperty({},l,o),sourceAfter:u}}}function byDataHandler(e,t){var r=e.source,a=e.context,n=t(r),l=n.data,i=n.sourceAfter;return{context:Object.assign({},a,l),source:i}}function extractData(e){return dataTypes$1.map(function(e){return e.handler}).reduce(byDataHandler,{context:{},source:e})}function findPropertyList(e){var t=e.match(keyValueGlobalPattern);return t?t.map(function(e){var t=keyValuePattern.exec(e);if(!t)return null;var r=slicedToArray(t,3),a=r[1],n=r[2],l=camelCase(a.trim());return{key:l,value:getValue(n,l)}}).filter(function(e){return e}):[]}function fillVariables(e,t,r){var a=r.simplifyDataValues;if("string"!=typeof e)return console.log("Warning: Something went wrong. Could not fill variables in: ("+(void 0===e?"undefined":_typeof(e))+") "+JSON.stringify(e)),{};var n=dataTypes$1.find(function(t){return e.match(t.pattern)});if(n){var l=n.pattern.exec(e),i=slicedToArray(l,2),s=i[0],o=i[1],u=t[n.name][parseInt(o,10)];return a||"string"!=typeof u?u:e.replace(s,u)}return e}function fillVariablesUntilDone(e,t,r){if(void 0===e)return e;if(e instanceof Date)return e;if("number"==typeof e)return e;if(Array.isArray(e))return e.map(function(e){return fillVariablesUntilDone(e,t,r)});if("object"===(void 0===e?"undefined":_typeof(e)))return Object.keys(e).reduce(function(a,n){return Object.assign(a,defineProperty({},n,fillVariablesUntilDone(e[n],t,r)))},{});var a=fillVariables(e,t,r);return a===e?e:fillVariablesUntilDone(a,t,r)}function handleSmallData(e,t,r){var a=r.simplifyDataValues;if("string"==typeof e&&e.match(smallDataType.pattern)){var n=e.replace(smallDataType.pattern,"").replace(/,/,"").trim(),l=smallDataType.pattern.exec(e),i=slicedToArray(l,2),s=i[1],o=t[smallDataType.name][parseInt(s,10)],u={primary:getVariableValue(n,t,{simplifyDataValues:a}),secondary:getVariableValue(o,t,{simplifyDataValues:a})};return a?u.primary:u}return null}function getVariableValue(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=r.simplifyDataValues,n=void 0===a||a,l=handleSmallData(e,t,{simplifyDataValues:n});return l||fillVariablesUntilDone(e,t,{simplifyDataValues:n})}function reduceVariable(e,t,r,a){if(null===t)return null;if("boolean"==typeof t)return t;if(Array.isArray(t))return t.map(function(e){return getVariableValue(e,r,a)});if(e.match(/areaTotal/)||e.match(/population/)){var n=numberParse(t);if(!1===n&&(n=parseFloat(t,10)),!isNaN(n))return n}if(e.match(/date/i)){var l=+new Date(t);if(!isNaN(l))return new Date(t)}var i=getVariableValue(t,r,a);return Array.isArray(i)?i.map(function(e){return getVariableValue(e,r,a)}):i}function byVariableReduction(e,t){return function(r,a){var n=a.key,l=a.value,i=reduceVariable(n,l,e,t);return""===i||null===i?r:Object.assign({},r,defineProperty({},n,i))}}function extractProperties(e,t){var r=e.source,a=e.context;return findPropertyList(r).reduce(byVariableReduction(a,t),{})}function transformProperties(e){return Object.keys(e).reduce(function(t,r){var a=e[r],n=r.match(blankNamePattern);if(n){var l=n[1]||"",i=e["blank"+l+"NameSec2"],s=e["blank"+l+"InfoSec2"];return"string"!=typeof i?t:Object.assign(t,defineProperty({},camelCase(i),s))}return r.match(blankInfoPattern)?t:Object.assign(t,defineProperty({},r,a))},{})}function findOuterIndex(e){for(var t=[],r=0;r<e.length-1;r++){var a=e.substr(r,2);if("{{"!==a){if("}}"===a){t.pop();if(0===t.length)return r+2;r++}}else t.push(r),r++}}function parse(e){var t=e.match(infoBoxStartPattern);if(!t)return{data:e,sourceLeft:null};var r=t.index,a=e.substring(r),n=findOuterIndex(a);if(!n)return{data:e,sourceLeft:null};var l=a.substring(0,n),i=e.substring(n);return{data:l,sourceLeft:!i.match(infoBoxStartPattern)?null:i}}function extractInfoboxes(e){for(var t=parse(e),r=[t.data];t.sourceLeft;)t=parse(t.sourceLeft),r.push(t.data);return r}function cleanSource(e){return e.replace(/''/g,"").replace(/\|display=inline/g,"").replace(/<br\s?\/?>/g,",").replace(/<ref(\s\w+=[^>]+)?>.*<\/ref>/g,"").replace(/&minus;/g,"-").replace(/<sup>/g,"^").replace(/\{\{sfn\|([^\}\}]+)\}\}/g,"").replace(/\{\{efn\|([^\}\}]+)\}\}/g,"").replace(/âˆ’/g,"-").replace(/<\/sup>/g,"").replace(/<ref(\s\w+=[^>]+)?\s?\/>/g,"").replace(/<!--([\s\S]*?)-->/g,"").replace(/&nbsp;/g," ").replace("|''See list''","")}function transformRowSpan(e){return e.map(transformCells).reduce(function(e,t,r){for(var a=0===r?0:1,n=0;n<t.length;n++)e[n+a]||(e[n+a]={}),t[n]&&(e[n+a][t[n]]=1);return e},[]).map(function(e){return Object.keys(e).join(",")}).join(" || ")}function clean(e){return e.substring(2,e.length-2).replace(linkPattern$1,function(e,t){return t.split("|")[0]}).replace(/'''?/g,"")}function parseRow(e){var t=e[0].match(/BS(\d)/),r=e[0].substring(2),a=1,n=[],l=1;for(t&&(a=t[1],r=e[0].substring(3));l<=a;l++)n.push(e[l]);return{type:r,margin:e[l++],text1:e[l++],text2:e[l++],comment:e[l++],icons:n}}function getMatches(e,t){for(var r=void 0,a=[];null!==(r=t.exec(e));)a.push({value:r[1]&&r[1].trim(),start:r.index,end:r.index+r[0].length});return a}function parseTableData(e){var t=e.match(rowPattern$1);return t?t.map(function(e){var t=e.match(rowPatternSingle);return slicedToArray(t,2)[1].trim().split("|").slice(1)}):[]}function getTables(e){var t=getMatches(e,tableStartPattern$1),r=getMatches(e,tableEndPattern$1);return t.map(function(t,a){var n=r[a];if(!n)throw new Error("[Table Parsing] Failed to pair table");return{rows:parseTableData(e.substring(t.end,n.start).trim().replace(/'''/g,"")),start:t.start,end:n.end}})}function last(e){return e.length?e[e.length-1]:void 0}var camelCase=_interopDefault(require("camelcase")),_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},defineProperty=function(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e},slicedToArray=function(){function e(e,t){var r=[],a=!0,n=!1,l=void 0;try{for(var i,s=e[Symbol.iterator]();!(a=(i=s.next()).done)&&(r.push(i.value),!t||r.length!==t);a=!0);}catch(e){n=!0,l=e}finally{try{!a&&s.return&&s.return()}finally{if(n)throw l}}return r}return function(t,r){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return e(t,r);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),toConsumableArray=function(e){if(Array.isArray(e)){for(var t=0,r=Array(e.length);t<e.length;t++)r[t]=e[t];return r}return Array.from(e)},smallGlobalPattern=/\{\{small\|([^\}\}]+)\}\}/g,smallPattern=/small\|([^\}\}]+)\}\}/,small={globalPattern:smallGlobalPattern,parsePattern:smallPattern,parse:function(e){return slicedToArray(e,2)[1]},variable:"SMALL",name:"smalls"},flagGlobalPattern=/\{\{flag\|([^\}\}]+)\}\}/g,flagPattern=/flag\|([^\}\}]+)\}\}/,flag={globalPattern:flagGlobalPattern,parsePattern:flagPattern,parse:function(e){return slicedToArray(e,2)[1]},variable:"FLAG",name:"flags"},coordsGlobalPattern=/\{\{coord\|([^\}\}]+)\}\}/g,coordsPattern=/coord\|([^\}\}]+)\}\}/,coords={globalPattern:coordsGlobalPattern,parsePattern:coordsPattern,parse:function(e){return slicedToArray(e,2)[1]},variable:"COORD",name:"coords"},globalPattern=/\[\[([^\]\|]+)\|?([^\]]+)?\]\]/g,pattern=/\[\[([^\]\|]+)\|?([^\]]+)?\]\]/,instances={globalPattern:globalPattern,parsePattern:pattern,parse:function(e){var t=slicedToArray(e,3),r=t[1],a=t[2];return r||a},variable:"INSTANCE",name:"instances"},extraPropertyPattern=/\n?\s?\|\s?\w+$/,endingPattern=/\n\}\}$/,linksPattern=/((\$\w+_\d+)\s*,?\s*){2,}/g,linkSeparatorPattern=/[,\s?]/g,listItemPrefixPattern=/^\|\s?/,unbulletedListGlobalPattern=/\{\{(?:unbulleted list|ubl|ubt|ublist|unbullet)\s?\|([^\}\}]+)\}\}/g,unbulletedListItemPattern=/\|\s*([^|}]+)/g,unbulletedLists={globalPattern:unbulletedListGlobalPattern,parsePattern:unbulletedListItemPattern,parse:function(e){return e?e.map(function(e){return e.replace(listItemPrefixPattern,"").trim()}).filter(function(e){return e&&e.length}):[]},variable:"UNBULLETED_LIST",name:"unbulletedLists"},listItemPrefixPattern$1=/^\*\s*/,plainListGlobalPattern=/\n(\*\s*[^*|]+)+/g,plainListItemPattern=/\*\s*([^*|]+)/g,unmarkedLists={globalPattern:plainListGlobalPattern,parsePattern:plainListItemPattern,parse:function(e){return e?e.map(function(e){return e.replace(listItemPrefixPattern$1,"").trim()}).filter(function(e){return e&&e.length}):[]},variable:"UNMARKED_LIST",name:"unmarkedLists"},listItemPrefixPattern$2=/^\*\s?/,plainListGlobalPattern$1=/\{\{f?p?P?l?a?i?n?t?list\s?\|([^\}\}]+)\}\}/g,plainListItemPattern$1=/\*\s*([^*}]+)/g,plainLists={globalPattern:plainListGlobalPattern$1,parsePattern:plainListItemPattern$1,parse:function(e){return e?e.map(function(e){return e.replace(listItemPrefixPattern$2,"").trim()}).filter(function(e){return e&&e.length}):[]},variable:"PLAIN_LIST",name:"plainLists"},marriageGlobalPattern=/\{\{Marriage\|([^\}\}]+)\}\}/g,marriagePattern=/Marriage\|([^|]+)\|(.*)\}\}/,marriages={globalPattern:marriageGlobalPattern,parsePattern:marriagePattern,parse:function(e){var t=slicedToArray(e,3);return{who:t[1],married:t[2]}},variable:"MARRIAGE",name:"marriages"},otherGlobalPattern=/\{\{([^|\n]+)\|([^|\n]+)\|?([^\}\n]+)?\}\}/g,otherPattern=/\{\{([^|\n]+)\|([^|\n]+)\|?([^\}\n]+)?\}\}/,other={globalPattern:otherGlobalPattern,parsePattern:otherPattern,parse:function(e){var t=slicedToArray(e,4),r=t[1];t[2],t[3];return r},variable:"OTHER",name:"others"},birthDateGlobalPattern=/\{\{birth\sdate([^\}\}]+)\}\}/gi,birthDatePattern=/(\d+)\|(\d+)\|(\d+)/,millisInYear=31536e6,birthDates={globalPattern:birthDateGlobalPattern,parsePattern:birthDatePattern,parse:function(e){var t=slicedToArray(e,4),r=t[1],a=t[2],n=t[3],l=new Date(r,a-1,n);return{date:l,age:Math.floor((Date.now()-+l)/millisInYear)}},variable:"BIRTH_DATE",name:"birthDates"},DO_NOT_REPLACE=Symbol("DO NOT REPLACE"),labeledDateGlobalPattern=/\{\{([^\n\}\}]+)\}\}/g,labeledDatePattern=/(.*)/,labeledDates={globalPattern:labeledDateGlobalPattern,parsePattern:labeledDatePattern,parse:function(e){var t=e[0].indexOf("|");if(t>-1){var r=e[0].substring(t+1).slice(0,-2),a=new Date(r+" GMT");if(!isNaN(a.getTime()))return{date:a};if(a=new Date(r.split("|").join("-")+" GMT"),!isNaN(a.getTime()))return{date:a}}return DO_NOT_REPLACE},variable:"LABELED_DATE",name:"labeledDates"},deathDateGlobalPattern=/\{\{death\sdate\sand\sage([^\}\}]+)\}\}/gi,deathDatePattern=/(\d+)\|(\d+)\|(\d+)\|(\d+)\|?(\d+)?\|?(\d+)?/,millisInYear$1=31536e6,deathDates={globalPattern:deathDateGlobalPattern,parsePattern:deathDatePattern,parse:function(e){var t=slicedToArray(e,7),r=t[1],a=t[2],n=t[3],l=t[4],i=t[5],s=void 0===i?0:i,o=t[6],u=void 0===o?0:o,c=new Date(r,a-1,n),f=new Date(l,s-1,u);return{date:c,age:Math.floor((Number(c)-Number(f))/millisInYear$1)}},variable:"DEATH_DATE",name:"deathDates"},URLGlobalPattern=/\{\{URL\|([^\}\}]+)\}\}/g,URLPattern=/URL\|([^\}\}]+)\}\}/,url={globalPattern:URLGlobalPattern,parsePattern:URLPattern,parse:function(e){return slicedToArray(e,2)[1]},variable:"URL",name:"urls"},websiteGlobalPattern=/\[(https?):\/\/((?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6})\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)\s+([\w\s]+)\]/g,websitePattern=/\[(https?):\/\/((?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6})\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)\s+([\w\s]+)\]/,website={globalPattern:websiteGlobalPattern,parsePattern:websitePattern,parse:function(e){var t=slicedToArray(e,5),r=t[1],a=t[2],n=t[3];return{protocol:r,hostname:a,path:n,title:t[4],url:r+"://"+a+n}},variable:"WEBSITE",name:"websites"},convertGlobalPattern=/\{\{convert\|([\d\.]+)\|(\w+)/g,convertPattern=/\{\{convert\|([\d\.]+)\|(\w+)/,convert={globalPattern:convertGlobalPattern,parsePattern:convertPattern,parse:function(e){var t=slicedToArray(e,3);return t[1]+" "+t[2]},variable:"CONVERT",name:"converts"},dataTypes=[instances,small,flag,coords,marriages,birthDates,labeledDates,deathDates,unbulletedLists,website,url,convert,other,plainLists,unmarkedLists],dataTypes$1=dataTypes.map(function(e){return{handler:dataType(e),name:e.name,pattern:new RegExp("\\$"+e.variable+"_(\\d+)")}}),keyValueGlobalPattern=/\|\s*([-'\u0400-\u04FF\w\s]+)\s*=\s*([^|]+)?/g,keyValuePattern=/\|\s*([-'\u0400-\u04FF\w\s]+)\s*=\s*([^|]+)?/,numberParse=function(e){return"string"==typeof e&&(e=e.trim().replace(/ /g,""),e.match(/,/)&&e.match(/\./)?e.indexOf(",")<e.indexOf(".")?parseEnglish(e):parseSpanish(e):e.match(/,/)&&!e.match(/\./)?e.match(/,/g).length>1?parseEnglish(e):e.match(/,[0-9]{3}($|^[0-9])/)?parseEnglish(e):parseSpanish(e):!e.match(/,/)&&e.match(/\./)?e.match(/\./g).length>1?parseSpanish(e):e.match(/\.[0-9]{3}($|^[0-9])/)?parseSpanish(e):parseEnglish(e):(+e).toString()===e&&+e)},parseEnglish=function(e){return+e.replace(/,/g,"")},parseSpanish=function(e){return+e.replace(/\./g,"").replace(/,/g,".")},smallDataType=dataTypes$1.find(function(e){return"smalls"===e.name}),blankNamePattern=/blank(\d+)?NameSec2/,blankInfoPattern=/blank(\d+)?InfoSec2/,infoBoxStartPattern=/{{\w*box/,tableStartPattern=/{\|(.*)\n?/,tableEndPattern=/\n\|}/,headersPattern=/!\s?(.*)/g,rowPattern=/\|-/,cellSeparatorPattern=/(?:\n\|)|(?:\|\|)/,linkPattern=/\[\[([^\]]+)\]\]/g,linkNamePattern=/^.*\|/,inlineHeaderPattern="!!",actionPattern=/{{anchor\|(.*)}}/g,ticks=/'''/g,rowSpanCountPattern=/rowspan="(\d+)"/,stripLinks=function(e){return e.replace(linkPattern,function(e,t){return t.replace(linkNamePattern,"").trim()||t})},removeActions=function(e){return e.replace(actionPattern,"")},transformCell=function(e){return stripLinks(removeActions(e||"")).replace(rowSpanCountPattern,"").replace(linkNamePattern,"").replace(ticks,"").trim()},transformCells=function(e){return e.split(cellSeparatorPattern).map(transformCell)},findIndex=function(e,t){var r=e.match(t);return r?r.index:-1},findTableStart=function(e){var t=e.match(tableStartPattern);return t?t.index+t[0].length:-1},findTableEnd=function(e){return findIndex(e,tableEndPattern)},getHeaders=function(e){for(var t=[],r=void 0;r=headersPattern.exec(e);)t.push.apply(t,toConsumableArray(r[1].split(inlineHeaderPattern).map(transformCell)));return t},getRows=function(e){var t=e.split(rowPattern).map(function(e){return e.replace(/^.*\n+?\|/,"").trim()}).filter(function(e){return e}),r=[],a=0,n=0,l=[],i=!0,s=!1,o=void 0;try{for(var u,c=t[Symbol.iterator]();!(i=(u=c.next()).done);i=!0){var f=u.value,p=f.match(rowSpanCountPattern);p&&(a=0,n=parseInt(p[1]),l=[]),a<n?(l.push(f),++a===n&&r.push(transformRowSpan(l))):r.push(f)}}catch(e){s=!0,o=e}finally{try{!i&&c.return&&c.return()}finally{if(s)throw o}}return r},getNextTable=function(e){var t=e,r=findTableStart(t);if(-1===r)return null;t=t.substring(r);var a=findTableEnd(t);if(-1===a)return null;t=t.substring(0,a);var n=getRows(t);if(!n.length)return null;var l=getHeaders(n[0]);return l.length?{data:n.slice(1).map(transformCells).map(function(e){return l.reduce(function(t,r,a){return t[camelCase(r)]=e[a],t},{})}),end:r+a}:null},parseTables=function(e){for(var t=[],r=e,a=null;a=getNextTable(r);){if(!a)return t;t.push(a.data),r=r.substring(a.end)}return t},linkPattern$1=/\[\[([^\]]+)\]\]/g,kmPattern=/{{BSkm\|([\dx]+,[\dx]+)\|([\dx]+,[\dx]+)}}/g,parseBsTables=function(e){var t=e.replace(kmPattern,"$1/$2").match(/{{BS([^}}]+)}}/g);return t?t.map(function(e){return clean(e).split("|")}).map(parseRow).filter(function(e){return"-"!==e.type[0]}):null},headingPattern=/[^=]==\s?([\w\s]+)\s?==/g,subheadingPattern=/===([\w\s]+)===/g,tableStartPattern$1=/{{list.+start.*}}/gi,tableEndPattern$1=/{{list.+end.*}}/gi,rowPattern$1=/{{(.*)}}/g,rowPatternSingle=/{{(.*)}}/,parseLists=function(e){var t=getMatches(e,headingPattern),r=getMatches(e,subheadingPattern),a=getTables(e);return a.forEach(function(e){var a=t.filter(function(t){return t.end<e.start}).map(function(e){return e.value});e.heading=last(a);var n=r.filter(function(t){return t.end<e.start}).map(function(e){return e.value});e.subheading=last(n),delete e.start,delete e.end}),a},index=function(e,t){var r=extractInfoboxes(e).map(function(e){return transformProperties(extractProperties(extractData(cleanSource(e)),t))});if(!r.length)return{};var a={general:r.shift()};return r.forEach(function(e){var t=e.type;t?a[camelCase(t)]=e:Object.assign(a,{general:Object.assign({},a.general,e)})}),a.tables=parseTables(e),a.bsTables=parseBsTables(e),a.lists=parseLists(e),a};module.exports=index;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
